/*******************************************************************************
 ********************************************************************************
 Startup function
 *******************************************************************************/

/**
 * Manage the header/footer dispaly for view in app 
 */
function AppDisplay() {
	if (screen.width > screen.height) {
		$("[name=viewport]").attr("content", "initial-scale=1,max-scale=1,min-scale=1,width=" + (1.8 * screen.height));
	}
	
	$("#login_form").submit(function(e) {
		SendLogin($(this), login_type);
		e.preventDefault();
	});

	$('.hide_onload').css('display', '');
	if (document.getElementById('outer')) {
		document.getElementById('outer').style.display = 'none';
	}

	qsParm = getParams();
	if (!qsParm['app']) {
		$('.app_visible').css('display', '');
		$('.app_visible').css('visibility', '');
		$('#page_content').removeClass('in_app');
	} else {
		$('#page_content').addClass('in_app');
	}

	if (!document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1")) {
		$('#page_footer').css('position', 'static').css('margin-top', '-37px');
	}

	window.onunload = stopPoll();
}



/*******************************************************************************
 ********************************************************************************
 Ajax polling file manager
 *******************************************************************************/
var open_picker = -1;

// Config
var timePoll = 500; //ms
var timePollError = 5000; //ms
var retryTime = 3000; //ms
var timeOut = 20000; //ms

// Global var
var extra_params = null;
var logged = false;
var timer = null;
var timeout_timer = null;
var pool_request = null;


/**
 * Function to start poll a file for timed data check.
 *
 * @param filename The address where retrive the file with data
 * @param callFunction The function with data manipulation
 */
function startPollFile(filename, callFunction) {
	var data = new Date();
	// Set a timeout timer for error
	timeout_timer = data.getTime();
	pollFile(filename, callFunction);
}


/**
 * Function call on page unload for stop polling and destroy the ajax call
 */
function stopPoll() {
	clearTimeout(timer);
	if (pool_request) {
		pool_request.abort();
		pool_request = null;
	}
}


/**
 * Function with ajax call of file and function callback on success.
 * When callFunction return true the poll is stopped.
 * The function manage the connection status on the footer.
 * -- Call only from timeout! --
 *
 * @param filename The address where retrive the file with data
 * @param callFunction The function with data manipulation
 */
function pollFile(filename, callFunction) {
	var date = new Date();
	var elapsed = date.getTime() - timeout_timer;

	// Check if need add extra params
	var url = filename;
	if (extra_params != null) {
		url = filename + extra_params;
		extra_params = null;
	}

	pool_request = $.ajax({
		url: location.protocol + "//" + bridgehost + url,
		type: 'GET',
		dataType: 'json',
		timeout: retryTime,
		cache: false,
		success: function(data) {
			$('#life_error').css('display', 'none');
			$('#life_display').css('display', '');
			$('#life').css('display', '');
			stop = callFunction(data);
			timeout_timer = date.getTime();
			if (!stop) {
				timer = setTimeout('pollFile(\'' + filename + '\', ' + callFunction + ')', timePoll);
			}
		},
		error: function(data, textStatus, jqXHR) {
			if (textStatus == 'timeout') {
				if (elapsed < timeOut) {
					$('#life_error').css('display', 'none');
					$('#life').css('display', '');
					$('#life_dispaly').css('display', '');
					$('#life').html(lang32);
				} else {
					$('#life').css('display', 'none');
					$('#life_display').css('display', 'none');
					$('#life_error').css('display', '');
					$('#life_error').html(lang33);
					if ($('#page_content')) {
						$('#head_menu').css('display', 'none');
						$('#page_content').css('display', 'none');
						$('#logout').css('display', 'none');

						if (open_picker != -1) {
							document.getElementById('rgb_input_' + open_picker).color.hidePicker();
						}
					}
				}
			}
			if (textStatus != 'abort') {
				timer = setTimeout('pollFile(\'' + filename + '\', ' + callFunction + ')', timePollError);
			}
		},
		statusCode: {
			404: function() {
				$('#life').css('display', 'none');
				$('#life_display').css('display', 'none');
				$('#life_error').css('display', '');
				$('#life_error').html(lang33 + '!');
				$('#login_box').css('display', '');
				if ($('#page_content')) {
					$('#page_content').css('display', 'none');
					$('#logout').css('display', 'none');
					$('#head_menu').css('display', 'none');
					if (open_picker != -1) {
						document.getElementById('rgb_input_' + open_picker).color.hidePicker();
					}
				}
			}
		}
	});
}


/*******************************************************************************
 ********************************************************************************
 User login/logout
 *******************************************************************************/

/**
 * Send the login to bridge.
 * 
 * @param form The form with password field
 * @param type The type of login: dom, old, alm, adm
 * @return FALSE for prevent the default action
 */
var login_timeout = 0;
var code_input_timeout = null;
function SendLogin(form, type, popup) {
	var dataQuery = form.find('[name=code]').val();
	if (type == 'alm') {
		for (var i = 0; i < 6; i++) {
			if ((dataQuery[i] < '0') || (dataQuery[i] > '9')) {
				$('#life').html(lang47);
				var date = new Date();
				login_timeout = date.getTime() + 10000;
				return;
			}
		}
	}
	dataQuery = type + '=' + dataQuery;
	single_request = jQuery.ajax({
		'url': location.protocol + "//" + bridgehost + '/login.cgi',
		'method': 'POST',
		'data': dataQuery
	}).success(function(data) {
		clearTimeout(code_input_timeout);
		code_input_timeout = null;
		$('#life').html('Login...');
		var date = new Date();
		login_timeout = date.getTime() + 5000;
	});
	form.find('[name=\'code\']').val('');
	if (!popup) {
		return false;
	}
}


/**
 * Send the logout to bridge.
 */
function SendLogout() {
	dataQuery = 'logout' + '=' + '1';
	single_request = jQuery.ajax({
		'url': location.protocol + "//" + bridgehost + '/login.cgi',
		'method': 'POST',
		'data': dataQuery
	});
}


/**
 * Function call for check login on the page.
 * The function manage the connection message and the visibility of page_content
 *
 * @param type The type of login: dom, old, alm, adm, setup
 * @param data The data contained into the XML file loaded by page
 * @return FALSE to prevent the default action
 */
function checkLogin(type, data) {
	if ((data.logged >= 90) && (type == 'alm')) {
		$('#login_box').css('display', 'none');
		$('#page_content').css('display', 'none');
		$('#logout').css('display', 'none');
		$('#life').css('display', 'none');
		$('#head_menu').css('display', 'none');
		$('#alarm_config_load').css('display', 'none');
		$('#alarm_config_error').css('display', 'none');
		switch (data.logged) {
			case 99:
				$('#alarm_config_error').css('display', '');
				break;
			case 96:
				$('#alarm_config_load').html('<p>' + lang367 + '</p>');
				$('#alarm_config_load').css('display', '');
				break;
			default:
				$('#alarm_config_load').html('<p>' + lang364 + '</p><p>' + lang365 + '</p>');
				$('#alarm_config_load').css('display', '');
				break;
		}
		return false;
	} else {
		$('#alarm_config_load').css('display', 'none');
		$('#alarm_config_error').css('display', 'none');
	}
	var tmpcol = '#AAAAAA';
	var logged = isLogged(type, data);
	if (logged) {
		$('#login_box').css('display', 'none');
		if (type == 'alm') {
			if (data.rt_stat != 9) {
				$('#life').html(lang49);	//Login...
			} else {
				if ($('#page_content')) {
					$('#page_content').css('display', '');
					$('#logout').css('display', '');
					$('#life').html(lang35); // Connected
				}
			}
		} else {
			if ($('#page_content')) {
				$('#page_content').css('display', '');
				$('#logout').css('display', '');
			}
			$('#life').html(lang35); // Connected
		}
		if (data.life == 1) {
			tmpcol = '#000000';
		}
		else {
			tmpcol = '#009FE3';
		}
	} else {
		$('#login_box').css('display', '');
		if ($('#page_content')) {
			$('#page_content').css('display', 'none');
			$('#logout').css('display', 'none');
			$('#head_menu').css('display', 'none');
			if ($('#icons')) {
				$('#icons').attr('class', '');
			}
			if (open_picker != -1) {
				document.getElementById('rgb_input_' + open_picker).color.hidePicker();
			}
		}
		var date = new Date();
		if (date.getTime() > login_timeout) {
			$('#life').html(lang36); //Not logged in
			$('#life').html(vedoMessageLog(data));
			login_timeout = 0;
		}
		tmpcol = '#FF0000';
	}
	$('#life').css('color', tmpcol);
	return false;
}

/**
 * Set the code input timeout.
 */
function set_input_timeout() {
	$('[name=code]').unbind('keyup change input paste').bind('keyup change input paste', function(event) {
		if ((code_input_timeout == null) && ($(this).val().length == 1)) {
			code_input_timeout = setTimeout(input_timeout, 60000);
		}
	});
}

/**
 * Manage the input code timeout
 */
function input_timeout() {
	jQuery.ajax({
		'url': location.protocol + "//" + bridgehost + '/login.cgi',
		'method': 'POST',
		'data': 'alm' + '=' + '1000000'
	});
	$('#login_form').find('[name=\'code\']').val('');
	code_input_timeout = null;
}


/**
 * Various function to check the status of user on web
 * 
 * @param data: the data from json
 * @returns if user is logged
 */
function checkLoginAdm(data) {
	return checkLogin('adm', data);
}
function checkLoginDom(data) {
	return checkLogin('dom', data);
}
function checkLoginOld(data) {
	return checkLogin('old', data);
}
function checkLoginVedo(data) {
	return checkLogin('alm', data);
}
function checkLoginSetup(data) {
	return checkLogin('setup', data);
}


/**
 * Print the message for error in Vedo login
 * 
 * @param data: the data from json
 * @returns the string to print
 */
function vedoMessageLog(data) {
	switch (data.logged) {
		case 0:
			return lang36; //Non loggato
			break;
		case -8:
			return lang37; //Sconosciuto
			break;
		case -9:
			return lang38; //Install non aut
			break;
		case -10:
			return lang39; //Non aut
			break;
		case -15:
			return lang40; //Non aut on device
			break;
		case -17:
			return lang41; //Fuori fascia oraria
			break;
		case -18:
			return lang42; //Max operation
			break;
		case -28:
			return lang43; //Prog tecnica
			break;
		case -30:
			return lang44; //Err. aree inserite
			break;
		case -31:
			return lang45; //Coda piena
			break;
		case -32:
			return lang46; //Dispositivo Bloccato
			break;
	}
}


/**
 * Function to check the login status by type.
 *
 * @param type The type of login: dom, old, alm, adm
 * @param data: the data from json
 * @return The status of login user
 */
function isLogged(type, data) {
	var logged = false;
	switch (type) {
		case 'dom':
			logged = (data.domus.charAt(0) == '1');
			break;
		case 'old':
			logged = (data.old_auth.charAt(0) == '1');
			break;
		case 'alm':
			logged = ((data.logged == 1) && (data.rt_stat == 9));
			break;
		case 'adm':
			logged = (data.domus.charAt(1) == 'C');
			break;
		case 'setup':
			logged = (data.domus.charAt(data.domus.length - 1) == 'S');
			break;
		default:
			break;
	}
	return logged;
}


/*******************************************************************************
 ********************************************************************************
 Home page function
 *******************************************************************************/

/**
 * Print the calendar on top, print counter data
 *
 * @param data The data contained in the json file with login, datetime and toolbar
 */
function dateTimeHeader(data) {
	$('#head_counter').html(data.toolbar);
	if (data.dataora != '0') {
		var newDate = new Date();
		newDate.setTime(data.dataora * 1000);
		$('#head_datetime').html(z(newDate.getUTCHours()) + ':' + z(newDate.getUTCMinutes()) + ' - '
				+ z(newDate.getUTCDate()) + '/' + z((newDate.getUTCMonth() + 1)) + '/' + newDate.getUTCFullYear());
	}
}

/**
 * Function to manage the login and icon display into the main page.
 *
 * @param data The XML data
 */
function indexAuth(data) {
	var id_sect = ['safe', 'clima', 'other', 'shutter', 'light', 'irrigation', 'automation', 'counter', 'scenario'];
	checkLogin('dom', data);
	dateTimeHeader(data);
	if (logged) {
		if (isLogged('dom', data) == false) {
			logged = false;
			return false;
		}
		$('#safe_link').removeClass('partial total anomaly memory alarm');
		switch (data.icon_status.charAt(0)) {
			case '0': // Riposo
				break;
			case '1': // Parziale
				$('#safe_link').addClass('partial');
				break;
			case '2': // Totale
				$('#safe_link').addClass('total');
				break;
			case '3': // Anomalia
				$('#safe_link').addClass('anomaly');
				break;
			case '4': // Memoria allarme
				$('#safe_link').addClass('memory');
				break;
			case '5': // Allarme in corso
				$('#safe_link').addClass('alarm');
				break;
		}
		for (var icon_num = 1; icon_num < id_sect.length; icon_num++) {
			$('#' + id_sect[icon_num] + '_link').removeClass('on all');
			if (data.icon_status.charAt(icon_num) == '1') {
				$('#' + id_sect[icon_num] + '_link').addClass('on');
			} else if (data.icon_status.charAt(icon_num) == '2') {
				$('#' + id_sect[icon_num] + '_link').addClass('all');
			}
		}
	} else {
		if (isLogged('dom', data)) {
			logged = true;
			var qsParm = getParams();
			var start = 0;
			if (qsParm['app']) {
				start = 1;
			}
			for (var icon_num = start; icon_num < id_sect.length; icon_num++) {
				var disp = (data.domus.charAt(2 + icon_num) != '0') ? '' : 'none';
				$('#' + id_sect[icon_num] + '_link').css('display', disp);
			}
		}
	}
	return false;
}


/*******************************************************************************
 ********************************************************************************
 Icon page function
 *******************************************************************************/

var icons_data = {
	page: null,
	icon_desc: [],
	icon_env: [],
	icon_value: [],
	icon_type: [],
	icon_status: [],
	icon_protect: [],
	icon_timeout: [],
	env_desc: [],
	env_on: [],
	env_off: [],
	env_empty: []};

/**
 * Function to manage the icon page login
 *
 * @param data The XML login data
 */
function pageAuth(data) {
	checkLogin('dom', data);
	if (logged) {
		if (isLogged('dom', data) == false) {
			logged = false;
			return false;
		}
		updateIconStatus(data);
		if (!isLogged('dom', data)) {
			location.href = location.protocol + "//" + bridgehost;
		}
	} else {
		if (isLogged('dom', data)) {
			stopPoll();
			logged = true;
			getIconData();
			startPollFile('/user/icon_status.json?type=' + icons_data.page, pageAuth);
			return true;
		}
	}
	return false;
}


/**
 * Function for getting the icon description and data for draw the page.
 * All the icon data is put in the icons_data array.
 */
function getIconData() {
	$.ajax({method: 'GET',
		url: location.protocol + '//' + bridgehost + '/user/icon_desc.json?type=' + icons_data.page,
		dataType: 'json',
		async: false,
		cache: false
	}).done(function(data) {
		icons_data.icon_desc = data.desc;
		icons_data.icon_env = data.env;
		icons_data.icon_status = data.status;
		icons_data.icon_protect = data.protected;
		icons_data.icon_value = data.val;
		icons_data.icon_type = data.type;
		icons_data.env_desc = data.env_desc;

		for (var i = 0; i < (icons_data.env_desc.length); i++) {
			icons_data.env_empty[i] = true;
			icons_data.env_on[i] = 0;
			icons_data.env_off[i] = 0;
		}
		for (var i = 0; i < icons_data.icon_env.length; i++) {
			var j = icons_data.icon_env[i];
			if (j != 0) {
				icons_data.env_empty[j] = false;
				if (icons_data.icon_status[i] == '1') {
					icons_data.env_on[j]++;
				} else {
					icons_data.env_off[j]++;
				}
			}
		}
		if ((icons_data.page == 'light') || (icons_data.page == 'shutter') || (icons_data.page == 'other')) {
			createIconPage();
		} else {
			showIconEnvironment(0);
		}
	});
}


/**
 * Function to draw the list of environments on icon page.
 */
function createIconPage() {
	var html = '';
	for (var env_num = 0; env_num < (icons_data.env_desc.length); env_num++) {
		var status = 'some';
		if (icons_data.env_off[env_num] == 0) {
			status = 'on';
		} else if (icons_data.env_on[env_num] == 0) {
			status = 'off';
		}
		if (!icons_data.env_empty[env_num]) {
			if (icons_data.page != 'shutter') {
				html += '<div><button class="button icon_switch switch_off" onclick="sendActionCommand(\'env0=' + env_num + '\');return false;\">OFF</button>';
				html += '<button id="environment_' + env_num + '" class="button bridge_button short_button button_status_' + status + '" onclick="showIconEnvironment(' + env_num + ')"><span>' + icons_data.env_desc[env_num] + '</span><div class="icons icon_type icon_type_' + icons_data.page + '">&nbsp;</div></button>';
				html += '<button class="button icon_switch switch_on" onclick="sendActionCommand(\'env1=' + env_num + '\');return false;">ON</button></div>';
			} else {
				html += '<div><button class="icons button icon_switch switch_down" onclick="sendActionCommand(\'env0=' + env_num + '\');return false;\">DOWN</button>';
				html += '<button id="environment_' + env_num + '" class="button bridge_button short_button button_status_' + status + '" onclick="showIconEnvironment(' + env_num + ')"><span>' + icons_data.env_desc[env_num] + '</span><div class="icons icon_type icon_type_' + icons_data.page + '">&nbsp;</div></button>';
				html += '<button class="icons button icon_switch switch_up" onclick="sendActionCommand(\'env1=' + env_num + '\');return false;">UP</button></div>';
			}
			html += '<div class="clear"></div>';
		}
	}
	$('#environments').html(html);
	$('#environments').css('display', '');
	$('#head_menu').css('display', 'none');
	$('#icons').css('display', 'none');
}


/**
 * Function to draw the list of icon in the id environment.
 *
 * @param id The id of environmet
 * @return FALSE for prevent the default action
 */
function showIconEnvironment(id) {

	// Design the header menu
	if ((icons_data.page == 'light') || (icons_data.page == 'shutter') || (icons_data.page == 'other')) {
		$('#head_menu').css('display', '');
		$('#menu_name').html(icons_data.env_desc[id]);
		$('#menu_back').attr('href', 'javascript:void(0)');
		for (var i = (icons_data.env_desc.length - 1); i > id; i--) {
			if (!icons_data.env_empty[i]) {
				$('#menu_back').attr('href', '#environment_' + i);
				break;
			}
		}
		for (var i = (id - 1); i > 0; i--) {
			if (!icons_data.env_empty[i]) {
				$('#menu_back').attr('href', '#environment_' + i);
				break;
			}
		}
		$('#menu_next').attr('href', 'javascript:void(0)');
		for (var i = 0; i < id; i++) {
			if (!icons_data.env_empty[i]) {
				$('#menu_next').attr('href', '#environment_' + i);
				break;
			}
		}
		for (var i = (id + 1); i < (icons_data.env_desc.length); i++) {
			if (!icons_data.env_empty[i]) {
				$('#menu_next').attr('href', '#environment_' + i);
				break;
			}
		}
	}

	// Design the list of icon
	var html = "";
	var dimmerable = false;
	var rgb_present = false;

	for (var icon_num = 0; icon_num < (icons_data.icon_desc.length); icon_num++) {

		// if scenario jump if scenario is not visible
		if ((icons_data.page == 'scenario') && (icons_data.icon_value[icon_num] == 0)) {
			continue;
		}

		// Design only environment icons
		if (icons_data.icon_env[icon_num] == (id)) {
			html += '<div>';

			/* Design the left button (DOWN or OFF) */
			var down_active = '';
			var icon_id = '';
			if ((icons_data.page == 'shutter') || (icons_data.page == 'automation')) {
				icon_id = ' id="icon_switch_down_' + icon_num + '"';
				if (icons_data.icon_status[icon_num] == 2) {
					down_active = ' active';
				}
			}
			if ((icons_data.page != 'clima') && (icons_data.page != 'shutter') && (icons_data.page != 'scenario')) {
				html += '<button' + icon_id + ' class="button icon_switch switch_off' + down_active + ' icon_switch_' + icon_num + '" onclick="sendActionCommand(\'num0=' + icon_num + '\');return false;">OFF</button>';
			} else if (icons_data.page == "shutter") {
				html += '<button id="icon_switch_down_' + icon_num + '" class="icons button icon_switch switch_down' + down_active + '" onclick="sendActionCommand(\'num0=' + icon_num + '\');return false;">DOWN</button>';
			}


			// Design the element button
			var button_class = 'button bridge_button button_' + icons_data.page;

			// set the type of button for longest
			if ((icons_data.page == 'scenario') || (icons_data.page == 'clima')) {
				button_class += ' long_button';
			} else {
				button_class += ' short_button';
			}
			// add the type of element
			if (icons_data.icon_type[icon_num] == '1') {
				button_class += ' temp_element';
			} else if (icons_data.icon_type[icon_num] == '3') {
				button_class += ' rgb_element';
			}
			// check the status of button
			if (icons_data.icon_status[icon_num] == 0) {
				button_class += ' button_status_off';
			} else {
				button_class += ' button_status_on';
			}
			// put the button html code
			html += '<button id="button_icon_' + icon_num + '" class="' + button_class + '"';
			if (icons_data.page == "scenario") {
				// if scenario add the send action
				html += " onclick=\"sendScenarioAction('" + icon_num + "');return false;\" ";
			} else if (icons_data.icon_type[icon_num] == '10') {
				html += " onclick=\"sendActionCommand('dimmer=" + icon_num + "&pres=2');return false;\" ";
			}
			html += '><span>' + icons_data.icon_desc[icon_num] + '</span>';
			if ((icons_data.page != 'clima') && (icons_data.page != 'scenario')) {
				var type = '';
				if (icons_data.icon_type[icon_num] == '3') {
					type = ' rgb';
				} else if (icons_data.icon_type[icon_num] == '10') {
					type += ' presence';
				}
				html += '<div class="icons icon_type icon_type_' + icons_data.page + type + '">&nbsp;';
			} else if (icons_data.page == 'clima') {

				/* Print clima data in the button */
				html += '<div class="thermo">';
				if (icons_data.icon_type[icon_num] != 11) {
					/* If thermo present print the data in the div */
					html += '<div class="thermo_status';
					if (icons_data.icon_value[icon_num][0][1] == 1) {
						html += ' active';
					}
					if (icons_data.icon_value[icon_num][0][2] == 'U') {
						html += ' upper';
					} else if (icons_data.icon_value[icon_num][0][2] == 'L') {
						html += ' lower';
					}
					html += ' icons"';
					if (icons_data.icon_value[icon_num][0][2] == 'O') {
						html += ' style="visibility:hidden"'
					}
					html += '></div><div class="thermo_value">';
					html += (parseFloat(icons_data.icon_value[icon_num][0][0]) / 10).toFixed(1) + '&deg;C';
					html += '</div>';
				}

				html += '</div><div class="humi">';
				if ((icons_data.icon_type[icon_num] >= 11) &&
						(icons_data.icon_type[icon_num] <= 14) &&
						(icons_data.icon_type[icon_num] != 12)) {

					/* If Humi present print the data in the div */
					html += '<div class="humi_status';
					if (icons_data.icon_value[icon_num][1][1] == 1) {
						html += ' active';
					}
					if (icons_data.icon_value[icon_num][1][2] == 'U') {
						html += ' upper';
					} else if (icons_data.icon_value[icon_num][1][2] == 'L') {
						html += ' lower';
					}
					html += ' icons"';
					if (icons_data.icon_value[icon_num][1][2] == 'O') {
						html += ' style="visibility:hidden"'
					}
					html += '></div><div class="humi_value">';
					html += (parseFloat(icons_data.icon_value[icon_num][1][0]) / 10).toFixed(0) + '%';
				}

				html += "</div>";

			} else if (icons_data.page == 'scenario') {
				var byauth = '';
				if (icons_data.icon_protect[icon_num] == 1) {
					byauth = ' alarm_login';
				}
				html += '<div class="icons icon_type icon_type_' + icons_data.page + byauth + '">&nbsp;';
			}
			html += "</div></button>";


			/* Design the right button (UP or ON)*/
			var up_active = '';
			var icon_id = '';
			if ((icons_data.page == 'shutter') || (icons_data.page == 'automation')) {
				icon_id = ' id="icon_switch_up_' + icon_num + '"';
				if (icons_data.icon_status[icon_num] == 1) {
					up_active = ' active';
				}
			}
			if ((icons_data.page != 'clima') && (icons_data.page != 'shutter') && (icons_data.page != 'scenario')) {
				html += '<button' + icon_id + ' class="button icon_switch switch_on' + up_active + ' icon_switch_' + icon_num + '" onclick="sendActionCommand(\'num1=' + icon_num + '\');return false;">ON</button>';
			} else if (icons_data.page == "shutter") {
				html += '<button id="icon_switch_up_' + icon_num + '" class="icons button icon_switch switch_up' + up_active + '" onclick="sendActionCommand(\'num1=' + icon_num + '\');return false;">UP</button>';
			}

			if (icons_data.page == 'light') {
				/* print the slider and/or RGB color selection for light page */
				switch (icons_data.icon_type[icon_num]) {
					case 2:
					case 10:
						html += '<div class="slider" id="dimmer_' + icon_num + '"></div>';
						dimmerable = true;
						break;
					case 3:
						html += '<div class="rgb_slider" id="rgb_value_' + icon_num + '"></div>';
						html += '<div class="rgb_icon" id="rgb' + icon_num + '"><input class="color {pickerFace:0,onImmediateChange:\'updateRGBSlider(this, ' + icon_num + ');\',minV:(1/32),pickerFaceColor:\'transparent\',pickerPosition:\'top\',pickerOnfocus:false,pickerBorder:0,pickerInsetColor:\'black\',hash:false,slider:false});" id="rgb_input_' + icon_num + '" value="' + icons_data.icon_value[icon_num] + '" onchange="setRGBColor(this.color,' + icon_num + ')" ></div>';
						rgb_present = true;
						break;
					default:
						break;
				}
			} else if (icons_data.page == 'clima') {
				var power_text = 'ON';
				var power_action = 'off';
				var regime_text = '';
				var regime_action = '';

				/* Get the initial page */
				var clima_page = 'thermo';
				var active_function = 0;
				if ((icons_data.icon_type[icon_num] == 11) ||
						(icons_data.icon_type[icon_num] == 14)) {
					clima_page = 'humi';
					active_function = 1;
				}

				/* Set the regime and power button text/action */
				switch (icons_data.icon_value[icon_num][active_function][2]) {
					case 'O':
						power_text = 'OFF';
						power_action = 'on';
						break;
					case 'U':
						regime_text = 'upper';
						regime_action = 'lower';
						break;
					case 'L':
						regime_text = 'lower';
						regime_action = 'upper';
						break;
					default:
						break;
				}

				/* Hide the button if module is power down */
				var power_style = ''
				if (power_text == 'OFF') {
					power_style = ' style="visibility: hidden;"'
				}

				/* Set button for auto/man function */
				var auto_class = '';
				var setpoint_button_style = ' style="visibility: hidden;"';
				if (icons_data.icon_value[icon_num][active_function][3] == 'A') {
					auto_class = ' status_on';
				}
				var man_class = '';
				if (icons_data.icon_value[icon_num][active_function][3] == 'M') {
					setpoint_button_style = '';
					man_class = ' status_on';
					set_button = '';
				}
				var semi_class = '';
				if (icons_data.icon_value[icon_num][active_function][3] == 'S') {
					semi_class = ' status_on';
				}
				var status = 'on';
				if (icons_data.icon_status[icon_num] == 0) {
					status = "off";
				}

				/* Design button for function request */
				var function_button = '<div class="clima_function_content">';
				if (icons_data.icon_type[icon_num] == 13) {
					function_button += '<div id="function_' + icon_num + '" class="clima_function thermo input active"><div class="icons clima_function_thermo"></div></div><div id="function_' + icon_num + '" class="clima_function humi input"><div class="icons clima_function_humi"></div></div>';
				} else if (icons_data.icon_type[icon_num] == 14) {
					function_button += '<div id="function_' + icon_num + '" class="clima_function thermo input"><div class="icons clima_function_thermo"></div></div><div id="function_' + icon_num + '" class="clima_function humi input active"><div class="icons clima_function_humi"></div></div>';
				}

				var onoff_button = '<button id="onoff_' + icon_num + '" class="button icon_switch onoff_button status_' + power_text.toLowerCase() + '" onclick="sendClimaCommand(' + icon_num + ', \'' + power_action + '\');return false;">' + power_text + '</button>';

				var regime_button = '<button id="regime_' + icon_num + '" class="button icons clima_vis_' + icon_num + ' icons icon_switch regime_button ' + regime_text + '" onclick="sendClimaCommand(' + icon_num + ', \'' + regime_action + '\');return false;"' + power_style + '">' + regime_text + '</button>';

				var dp_status = 'off';
				if (icons_data.icon_value[icon_num][2][1] != 0) {
					dp_status = 'on';
				}
				var value_label = '&deg;C';
				var setpoint_decimal = 1;
				if (active_function == 1) {
					value_label = '%';
					setpoint_decimal = 0;
				}
				var value_text = '<div id="value' + icon_num + '" class="value input"><div class="icons dewpoint thermo_dewpoint_' + dp_status + '"></div><span>' + (parseFloat(icons_data.icon_value[icon_num][active_function][0]) / 10).toFixed(1) + value_label + '</span><div class="icons status clima_' + regime_text + '_' + status + '"></div></div>';

				var auto_button = '<button id="auto_' + icon_num + '" class="button clima_mode clima_vis_' + icon_num + ' icon_switch auto_button' + auto_class + '" onclick="sendClimaCommand(' + icon_num + ', \'auto\');return false;"' + power_style + '>A</button>';
				var man_button = '<button id="man_' + icon_num + '" class="button clima_mode clima_vis_' + icon_num + ' icon_switch man_button' + man_class + '" onclick="sendClimaCommand(' + icon_num + ', \'man\');return false;"' + power_style + '>M</button>';
				var semi_button = '<button id="semi_' + icon_num + '" class="button icons clima_mode icons clima_vis_' + icon_num + ' icon_switch semi_button' + semi_class + '"' + power_style + '>S</button>';

				var fan_button_style = power_style;
				var next_speed = icons_data.icon_value[icon_num][active_function][6] + 1;
				if (icons_data.icon_value[icon_num][active_function][5] > 1) {
					if (next_speed >= icons_data.icon_value[icon_num][active_function][5]) {
						next_speed = 0;
					}
				} else {
					fan_button_style = ' style="visibility:hidden;"';
				}
				var actual_speed = icons_data.icon_value[icon_num][active_function][6];
				if (actual_speed == 0) {
					actual_speed = 'A';
				}
				
				var fan_button = '<button id="fan_speed_' + icon_num + '" class="button icons clima_vis_' + icon_num + ' icons icon_switch fan_button" onclick="sendClimaCommand(' + icon_num + ', \'fan' + next_speed + '\');return false;"' + fan_button_style + '>' + actual_speed + '</button>';

				var setpoint_button = '<div id="setpoint_set' + icon_num + '" class="clima_vis_' + icon_num + ' setpoint button" ' + power_style + '>';
				setpoint_button += '<a id="minus_' + icon_num + '" class="clima_vis_' + icon_num + ' icons clima_regulator regulator_minus"' + setpoint_button_style + ' onclick="climaSetpoint(this);return false;">-</a>';
				setpoint_button += '<div class="icons vertical_divider">&nbsp;</div>';
				setpoint_button += '<span id="setpoint' + icon_num + '" class="setpoint">' + (icons_data.icon_value[icon_num][active_function][4] / 10).toFixed(setpoint_decimal) + value_label + '</span>';
				setpoint_button += '<div class="icons vertical_divider">&nbsp;</div>';
				setpoint_button += '<a id="plus_' + icon_num + '" class="clima_vis_' + icon_num + ' icons clima_regulator regulator_plus"' + setpoint_button_style + ' onclick="climaSetpoint(this);return false;">+</a>';
				setpoint_button += '</div>';

				var setpoint_slider = '<div id="setpoint_slider_' + icon_num + '" class="clima_slider_control"></div>';

				/* Prepare the table */
				var clima_table = '<table class="clima_table"><tbody>';
				clima_table += '<tr><td class="button_column">' + regime_button + '</td><td>' + function_button + '</td><td class="button_column">' + auto_button + '</td></tr>';
				clima_table += '<tr><td class="button_column">' + fan_button + '</td><td>' + value_text + '</td><td class="button_column">' + man_button + '</td></tr>';
				clima_table += '<tr><td class="button_column">' + onoff_button + '</td><td>' + setpoint_button + '</td><td class="button_column">' + semi_button + '</td></tr>';
				clima_table += '<tr><td class="clima_slider" colspan="3">' + setpoint_slider + '</td></tr>';
				clima_table += '</tbody></table>';

				/* Put table in the div */
				html += '<div class="clima_hide ' + clima_page + '" id="clima' + icon_num + '" style="height:0">' + clima_table + '</div>';
			}

			/* Close the icon button div */
			html += '</div><div class="clear"></div>'
		}
	}

	$('#icons').html(html);
	$('#environments').css('display', 'none');
	$('#icons').css('display', '');
	$('#head_menu').css('display', 'none');
	if ((icons_data.page != 'clima') && (icons_data.page != 'irrigation') && (icons_data.page != 'scenario') && (icons_data.page != 'automation')) {
		$('#head_menu').css('display', '');
	}

	var hash = "environment_" + id;
	if ((icons_data.page == 'light') || (icons_data.page == 'shutter') || (icons_data.page == 'other')) {
		$('#environments').css('display', 'none');
		var qsParm = getParams();
		$('#app_back_button').css('display', 'none');
		if (!qsParm['app']) {
			$('#back_button').attr('href', 'javascript:viewEnvironments()');
		} else {
			$('#app_back_button').attr('href', 'javascript:viewEnvironments()').css('display', '');
		}
		window.location.hash = hash;
		document.body.scrollTop = document.documentElement.scrollTop = 0;
	}

	$('#icons').attr('class', hash);
	$('#icons').css('display', '');
	if (icons_data.page == 'light') {
		if (dimmerable) {
			$(".slider").slider({
				range: "min",
				min: 0,
				max: 255,
				stop: function(event, ui) {
					var icon = $(this).attr('id').split('_')[1];
					clearTimeout(icons_data.icon_timeout[icon]);
					icons_data.icon_timeout[icon] = setTimeout('icons_data.icon_value[' + icon + '] = ' + ui.value, 500);
					$.ajax({method: 'GET',
						url: location.protocol + "//" + bridgehost + '/user/action.cgi?dimmer=' + icon + '&val=' + ui.value,
						async: false,
						cache: false
					});
				}
			});
			$(".slider").each(function() {
				var icon_num = $(this).attr('id').split('_')[1];
				if (icons_data.icon_type[icon_num] != 10) {
					$('#dimmer_' + icon_num).slider('option', 'value', icons_data.icon_value[icon_num]);
				} else {
					$('#dimmer_' + icon_num).slider('option', 'value', icons_data.icon_value[icon_num][0]);
				}
			});
		}
		if (rgb_present) {
			jscolor.init();
			$(".rgb_slider").slider({
				range: "min",
				min: 0,
				max: 1000,
				stop: function(event, ui) {
					var icon = $(this).attr('id').split('_')[2];
					clearTimeout(icons_data.icon_timeout[icon]);
					icons_data.icon_timeout[icon] = setTimeout('icons_data.icon_value[' + icon + '] = ' + ui.value, 500);
					document.getElementById('rgb_input_' + icon).color.fromHSV(document.getElementById('rgb_input_' + icon).color.hsv[0], document.getElementById('rgb_input_' + icon).color.hsv[1], ui.value / 1000);
					setRGBColor(document.getElementById('rgb_input_' + icon).color, icon);
				},
				slide: function(event, ui) {
					var icon = $(this).attr('id').split('_')[2];
					document.getElementById('rgb_input_' + icon).color.fromHSV(document.getElementById('rgb_input_' + icon).color.hsv[0], document.getElementById('rgb_input_' + icon).color.hsv[1], ui.value / 1000);
				}
			});
			$(".rgb_slider").each(function() {
				var icon_num = $(this).attr('id').split('_')[2];
				updateRGBSlider(document.getElementById('rgb_input_' + icon_num).color, icon_num);
			});
			$('.rgb_element').click(function() {
				var num = $(this).attr('id').split('_')[2];
				if ($('#rgb' + num).css('height') != '170px') {
					$('.rgb_icon').css('height', 0);
					$('#rgb' + num).css('height', '170px');
					document.getElementById('rgb_input_' + num).color.showPicker();
					open_picker = num;
				} else {
					$('.rgb_icon').css('height', 0);
					document.getElementById('rgb_input_' + num).color.hidePicker();
					open_picker = -1;
				}
			});
		}
	} else if (icons_data.page == 'clima') {
		if (is_master) {
			$('.clima_mode').css('display', 'none');
		}
		$('.bridge_button').click(function() {
			var num = $(this).attr('id').split('_')[2];
			if ($('#clima' + num).css('height') != '250px') {
				$('.clima_hide').css('height', 0);
				$('#clima' + num).css('height', '250px');
				extra_params = '&update=' + num;
			} else {
				$('.clima_hide').css('height', 0);
			}
		});
		$('.clima_function').click(changeClimaTableFunction);
		$('.clima_slider_control').slider({
			range: "min",
			min: 50,
			max: 300,
			stop: function(event, ui) {
				var icon_num = $(this).attr('id').split('_')[2];
				var temp = ui.value;
				if ((icons_data.icon_type[icon_num] == 6) ||
						(icons_data.icon_type[icon_num] == 12) ||
						(icons_data.icon_type[icon_num] == 13) ||
						(icons_data.icon_type[icon_num] == 14)) {
					temp = temp / 10;
				}
				var value_label = '&deg;C';
				var decimal_point = 1;
				if ($('#clima' + icon_num).hasClass('humi')) {
					value_label = '%';
					decimal_point = 0;
					temp = ui.value;
				}
				$('#setpoint' + icon_num).html((temp).toFixed(decimal_point) + value_label);
				temp = temp * 10;
				sendClimaCommand(icon_num, 'set', temp);
			},
			slide: function(event, ui) {
				var icon_num = $(this).attr('id').split('_')[2];
				var temp = ui.value;
				if ((icons_data.icon_type[icon_num] == 6) ||
						(icons_data.icon_type[icon_num] == 12) ||
						(icons_data.icon_type[icon_num] == 13) ||
						(icons_data.icon_type[icon_num] == 14)) {
					temp = temp / 10;
				}
				var value_label = '&deg;C';
				var decimal_point = 1;
				if ($('#clima' + icon_num).hasClass('humi')) {
					value_label = '%';
					decimal_point = 0;
					temp = ui.value;
				}
				$('#setpoint' + icon_num).html((temp).toFixed(decimal_point) + value_label);
			}
		});
		$('.button_clima').each(function(){
			var icon_num = $(this).attr('id').split('_')[2];
			updateClimaTable(icon_num, true);
			setpointSliderInit(icon_num);
		})
		
	}
}

/**
 * Init the setpoint slider of icon_num icon
 * 
 * @param {type} icon_num
 * @returns {undefined}
 */
function setpointSliderInit(icon_num) {
	var value = icons_data.icon_value[icon_num][0][4];
	var type = 0;
	if ($('#clima' + icon_num).hasClass('humi')) {
		value = icons_data.icon_value[icon_num][1][4];
		type = 1;
	}

	/* Change the slider config for various type of module */
	$('#setpoint_slider_' + icon_num).slider('option', 'min', 50);
	$('#setpoint_slider_' + icon_num).slider('option', 'max', 300);
	if (icons_data.icon_type[icon_num] == 5) {
		$('#setpoint_slider_' + icon_num).slider('option', 'min', 5);
		$('#setpoint_slider_' + icon_num).slider('option', 'max', 43);
		value = value / 10;
		value = Math.floor(value);
	} else if ((icons_data.icon_type[icon_num] == 11) ||
			(icons_data.icon_type[icon_num] == 13) ||
			(icons_data.icon_type[icon_num] == 14)) {
		if ($('#clima' + icon_num).hasClass('humi')) {
			value = value / 10;
			value = Math.floor(value);
			$('#setpoint_slider_' + icon_num).slider('option', 'min', 0);
			$('#setpoint_slider_' + icon_num).slider('option', 'max', 100);
		}
	}

	$('#setpoint_slider_' + icon_num).css('visibility', 'hidden');
	$('#setpoint_slider_' + icon_num).slider('option', 'value', value);
	if ((icons_data.icon_value[icon_num][type][3] == 'M') && (icons_data.icon_value[icon_num][type][2] != 'O')) {
		$('#setpoint_slider_' + icon_num).css('visibility', '');
	}
}


/**
 * Pass from icons environments view to environment list view
 */
function viewEnvironments() {
	if (icons_data.page == 'light') {
		if (document.getElementById('rgb_input_' + open_picker)) {
			document.getElementById('rgb_input_' + open_picker).color.hidePicker();
			open_picker = -1
		}
	}
	$('#environments').css('display', '');
	$('#icons').removeClass();
	$('#head_menu').css('display', 'none');
	$('#icons').css('display', 'none');
	$('#back_button').attr('href', '/index.htm');
	$('#app_back_button').css('display', 'none');
	window.location.hash = '';
	document.body.scrollTop = document.documentElement.scrollTop = 0;
}

function changeClimaTableFunction() {
	var icon_num = $(this).attr('id').split('_')[1];
	if ($(this).hasClass('humi')) {
		$('#clima' + icon_num).removeClass('thermo');
		$('#clima' + icon_num).addClass('humi');
		$('#function_' + icon_num + '.thermo').removeClass('active');
		$('#function_' + icon_num + '.humi').addClass('active');
	} else if ($(this).hasClass('thermo')) {
		$('#clima' + icon_num).removeClass('humi');
		$('#clima' + icon_num).addClass('thermo');
		$('#function_' + icon_num + '.humi').removeClass('active');
		$('#function_' + icon_num + '.thermo').addClass('active');
	}
	setpointSliderInit(icon_num);
	updateClimaTable(icon_num, true);
}

/**
 * Update the table of clima command
 * @param {type} icon_num the number of icon
 * @param {type} setpoint_force force the setpoint update (no timeout)
 */
function updateClimaTable(icon_num, setpoint_force) {

	/* Update the setpoint */
	clearTimeout(icons_data.icon_timeout[icon_num]);
	if (setpoint_force) {
		climaSetpointTimeout(icon_num);
	} else {
		icons_data.icon_timeout[icon_num] = setTimeout('climaSetpointTimeout(' + icon_num + ')', 2000);
	}

	var clima_type = 0;
	if ($('#clima' + icon_num).hasClass('humi')) {
		clima_type = 1;
	}

	var value_label = ['&deg;C', '%'];
	var decimal_point = [1, 0];

	/* Update the value */
	$('#value' + icon_num + ' span').html((parseFloat(icons_data.icon_value[icon_num][clima_type][0]) / 10).toFixed(decimal_point[clima_type]) + value_label[clima_type]);

	/* Manage the regime */
	var status = "on";
	var action = 'sendClimaCommand(' + icon_num + ', \'off\');return false;';

	$('.clima_vis_' + icon_num).css('visibility', 'hidden');
	$('#setpoint_slider_' + icon_num).css('visibility', 'hidden');
	$('#value' + icon_num + ' div.status').removeClass('clima_lower_off clima_upper_off clima_lower_on clima_upper_on');

	var part_status = 'on';
	if (icons_data.icon_value[icon_num][clima_type][1] == 0) {
		part_status = 'off';
	}
	
	if (icons_data.icon_value[icon_num][clima_type][2] == 'O') {
		status = "off";
		action = 'sendClimaCommand(' + icon_num + ', \'on\');return false;';
	} else {

		/* Dewpoint */
		$('#value' + icon_num + ' div.dewpoint').removeClass('thermo_dewpoint_off thermo_dewpoint_on').attr('onClick','').css('cursor','auto');
		$('#regime_' + icon_num).css('visibility', '');
		if ((icons_data.icon_value[icon_num][2][1] == 1) && (clima_type == 0)) {
			$('#value' + icon_num + ' div.dewpoint').addClass('thermo_dewpoint_on');
			$('#value' + icon_num + ' div.dewpoint').attr('onClick','sendClimaCommand(' + icon_num + ', \'dis_temp\', 0, \'dewpoint\');return false;');
			$('#value' + icon_num + ' div.dewpoint').css('cursor','pointer');
			
			$('#clima' + icon_num + ' .clima_mode').css('visibility', 'hidden');
			$('#clima' + icon_num + ' .clima_regulator').css('visibility', 'hidden');
			$('#clima' + icon_num + ' .clima_slider_control').css('visibility', 'hidden');
			$('#clima' + icon_num + ' .fan_button').css('visibility', 'hidden');
		} else {
			$('#value' + icon_num + ' div.dewpoint').addClass('thermo_dewpoint_off');
			
			$('#clima' + icon_num + ' .clima_mode').css('visibility', '');
			$('#fan_speed_' + icon_num).css('visibility', '');
			$('#setpoint_set' + icon_num).css('visibility', '');
		
			/* Fan Speed */
			if (icons_data.icon_value[icon_num][clima_type][5] <= 1) {
				$('#fan_speed_' + icon_num).css('visibility', 'hidden');
			}
			var next_speed = icons_data.icon_value[icon_num][clima_type][6] + 1;
			if (next_speed > icons_data.icon_value[icon_num][clima_type][5]) {
				next_speed = 0;
			}
			var actual_speed = icons_data.icon_value[icon_num][clima_type][6];
			if (actual_speed == 0) {
				actual_speed = 'A';
			}
			$('#fan_speed_' + icon_num).html(actual_speed);
			$('#fan_speed_' + icon_num).attr('onclick', 'sendClimaCommand(' + icon_num + ', \'fan' + next_speed + '\');return false;');

			/* Auto, man, countdown */
			if (icons_data.icon_value[icon_num][clima_type][3] == 'A') {
				$('#auto_' + icon_num).addClass('status_on');
				$('#man_' + icon_num).removeClass('status_on');
				$('#semi_' + icon_num).removeClass('status_on');

				clearTimeout(icons_data.icon_timeout[icon_num]);
				$('#setpoint' + icon_num).html((icons_data.icon_value[icon_num][clima_type][4] / 10).toFixed(decimal_point[clima_type]) + value_label[clima_type]);
			} else if (icons_data.icon_value[icon_num][clima_type][3] == 'M') {
				$('#auto_' + icon_num).removeClass('status_on');
				$('#man_' + icon_num).addClass('status_on');
				$('#semi_' + icon_num).removeClass('status_on');

				$('#minus_' + icon_num).css('visibility', '');
				$('#plus_' + icon_num).css('visibility', '');
				$('#setpoint_slider_' + icon_num).css('visibility', '');
			} else if (icons_data.icon_value[icon_num][clima_type][3] == 'S') {
				$('#auto_' + icon_num).removeClass('status_on');
				$('#man_' + icon_num).removeClass('status_on');
				$('#semi_' + icon_num).addClass('status_on');
			}
		}
		
		/* Upper Lower */
		if (icons_data.icon_value[icon_num][clima_type][2] == 'U') {
			$('#regime_' + icon_num).removeClass('lower');
			$('#regime_' + icon_num).addClass('upper');
			$('#regime_' + icon_num).attr("onclick", 'sendClimaCommand(' + icon_num + ', \'lower\');return false;');
			$('#value' + icon_num + ' div.status').addClass('clima_upper_' + part_status);
		} else if (icons_data.icon_value[icon_num][clima_type][2] == 'L') {
			$('#regime_' + icon_num).removeClass('upper');
			$('#regime_' + icon_num).addClass('lower');
			$('#regime_' + icon_num).attr("onclick", 'sendClimaCommand(' + icon_num + ', \'upper\');return false;');
			$('#value' + icon_num + ' div.status').addClass('clima_lower_' + part_status);
		}
	}

	$('#onoff_' + icon_num).removeClass('status_on status_off');
	$('#onoff_' + icon_num).addClass('status_' + status);
	$('#onoff_' + icon_num).attr("onclick", action);
	$('#onoff_' + icon_num).html(status.toUpperCase());
}


/**
 * Function for update the status of icon and change page to correspond the hash in page URL.
 *
 * @param xml The data from icon_status XML
 */
function updateIconStatus(data) {
	// Save the old status
	var old_status = icons_data.icon_status;
	icons_data.icon_status = data.status;
	var old_value = icons_data.icon_value;
	icons_data.icon_value = data.val;

	// check if page is correct with url
	var page = window.location.hash;
	var current = $('#icons').attr('class');
	if ((icons_data.page == 'light') || (icons_data.page == 'shutter') || (icons_data.page == 'other')) {
		if (((page.substring(1, page.length) != current) && current) ||
				((page.substring(0, page.indexOf("_") + 1) == '#environment_') && (!current))) {
			var env_num = page.substring(page.indexOf("_") + 1, page.length);
			if (icons_data.page == 'light') {
				if (document.getElementById('rgb_input_' + open_picker)) {
					document.getElementById('rgb_input_' + open_picker).color.hidePicker();
					open_picker = -1
				}
			}
			if ((!icons_data.env_empty[env_num]) && (env_num > 0) && (env_num < icons_data.env_desc.length)) {
				showIconEnvironment(parseInt(env_num));
			} else {
				viewEnvironments();
			}
		}
		if (((page == '#') || (page == '')) && ($('#environments').css('display') == 'none')) {
			viewEnvironments();
		} else if ($('#icons').css('display') != 'none') {
			$('#head_menu').css('display', '');
		}
	}

	for (var i = 0; i < (icons_data.env_desc.length); i++) {
		icons_data.env_on[i] = 0;
		icons_data.env_off[i] = 0;
	}
	for (var icon_num = 0; icon_num < icons_data.icon_env.length; icon_num++) {
		current = $('#icons').attr('class');
		var icon_env_num = icons_data.icon_env[icon_num];
		if (icon_env_num != 0) {
			if ((icons_data.icon_status[icon_num] == '1') || ((icons_data.icon_status[icon_num] == '2') && ((icons_data.page == 'shutter') || (icons_data.page == 'automation')))) {
				icons_data.env_on[icon_env_num]++;
			} else {
				icons_data.env_off[icon_env_num]++;
			}
		}
		if (current != null) {
			if (icon_env_num == current.substring(current.indexOf("_") + 1, current.length)) {
				var icon_id = '#button_icon_' + icon_num;
				var icon_class = $(icon_id).attr("class");
				if (icon_class) {

					/* Change the button status */
					if (old_status[icon_num] != icons_data.icon_status[icon_num]) {
						if (icons_data.icon_status[icon_num] == 0) {
							$(icon_id).removeClass('button_status_on');
							$(icon_id).addClass('button_status_off');
						} else {
							$(icon_id).removeClass('button_status_off');
							$(icon_id).addClass('button_status_on');
						}
					}

					if (icons_data.page != 'clima') {

						if (icons_data.page == 'light') {
							switch (icons_data.icon_type[icon_num]) {
								case 2:
									if (icons_data.icon_value[icon_num] != old_value[icon_num]) {
										$('#dimmer_' + icon_num).slider('option', 'value', icons_data.icon_value[icon_num]);
									}
									break;
								case 3:
									if (icons_data.icon_value[icon_num] != old_value[icon_num]) {
										document.getElementById('rgb_input_' + icon_num).color.fromString(icons_data.icon_value[icon_num]);
										updateRGBSlider(document.getElementById('rgb_input_' + icon_num).color, icon_num);
									}
									break;
								case 10:
									if (icons_data.icon_value[icon_num][0] != old_value[icon_num][0]) {
										$('#dimmer_' + icon_num).slider('option', 'value', icons_data.icon_value[icon_num][0]);
									}
									if (icons_data.icon_value[icon_num][1] == 0) {
										$('#button_icon_' + icon_num + ' .icon_type').removeClass('active');
									} else {
										$('#button_icon_' + icon_num + ' .icon_type').addClass('active');
									}
									break;
								default:
									break;
							}
						}
						if ((icons_data.page == 'shutter') || (icons_data.page == 'automation')) {
							$('#icon_switch_down_' + icon_num).removeClass('active');
							if (icons_data.icon_status[icon_num] == 2) {
								$('#icon_switch_down_' + icon_num).addClass('active');
							}
							$('#icon_switch_up_' + icon_num).removeClass('active');
							if (icons_data.icon_status[icon_num] == 1) {
								$('#icon_switch_up_' + icon_num).addClass('active');
							}
						}
					} else {
						/* Find active part */
						var start = 0;
						var end = 1;
						if ((icons_data.icon_type[icon_num] < 11) ||
								(icons_data.icon_type[icon_num] == 12)) {
							end = 0;
						}
						if (icons_data.icon_type[icon_num] == 11) {
							start = 1;
						}

						/* check the status of thermo and humi */
						for (var part = start; part <= end; part++) {

							var change_val = false;
							var i = icons_data.icon_value[icon_num][part].length;
							while (i--) {
								if (icons_data.icon_value[icon_num][part][i] != old_value[icon_num][part][i]) {
									change_val = true;
									break;
								}
							}

							var clima_type = ['thermo', 'humi'];
							var value_label = ['&deg;C', '%']

							if (change_val) {

								/* Set the button icon */
								if (icons_data.icon_value[icon_num][part][1] == 1) {
									$('#button_icon_' + icon_num + ' .' + clima_type[part] + '_status').addClass('active');
								} else {
									$('#button_icon_' + icon_num + ' .' + clima_type[part] + '_status').removeClass('active');
								}

								/* Hide the button icon if power off */
								if (icons_data.icon_value[icon_num][part][2] == 'O') {
									$('#button_icon_' + icon_num + ' .' + clima_type[part] + '_status').css('visibility', 'hidden');
								} else {
									$('#button_icon_' + icon_num + ' .' + clima_type[part] + '_status').css('visibility', '');
									
									$('#button_icon_' + icon_num + ' .' + clima_type[part] + '_status').removeClass('upper lower');
									if (icons_data.icon_value[icon_num][part][2] == 'U') {
										$('#button_icon_' + icon_num + ' .' + clima_type[part] + '_status').addClass('upper');
									} else if (icons_data.icon_value[icon_num][part][2] == 'L') {
										$('#button_icon_' + icon_num + ' .' + clima_type[part] + '_status').addClass('lower');
									}
								}

								$('#button_icon_' + icon_num + ' .' + clima_type[part] + '_value').html((icons_data.icon_value[icon_num][part][0] / 10).toFixed(1 - part) + value_label[part]);

								updateClimaTable(icon_num, false);

							}
						}
						
						if ((icons_data.icon_value[icon_num][2][0] != old_value[icon_num][2][0]) || (icons_data.icon_value[icon_num][2][1] != old_value[icon_num][2][1])) {
							updateClimaTable(icon_num, false);
						}
					}
				}
			}
		}
	}
	for (var i = 1; i < (icons_data.env_desc.length); i++) {
		var environment_class = $('#environment_' + i).attr('class');
		if (environment_class) {
			var status = "some";
			if (icons_data.env_off[i] == 0) {
				status = "on";
			} else if (icons_data.env_on[i] == 0) {
				status = "off";
			}
			string = environment_class.substring(0, environment_class.indexOf("button_status_") + 14) + status;
			$('#environment_' + i).attr('class', string);
		}
	}
}

/**
 * Send the action to bridge
 * 
 * @param {type} string the string of command
 */
function sendActionCommand(string) {
	$.ajax({method: 'GET',
		url: location.protocol + "//" + bridgehost + '/user/action.cgi?type=' + icons_data.page + '&' + string,
		async: false,
		cache: false
	});
	return false;
}



/*******************************************************************************
 ********************************************************************************
 Thermo page function
 *******************************************************************************/

/**
 * Set the setpoint on web and send command
 * @param button: the button clicked
 */
function climaSetpoint(button) {
	var icon_num = $(button).attr('id').split('_')[1];
	var action = $(button).attr('id').split('_')[0];
	var setpoint = $('#setpoint' + icon_num).html();

	var clima_type = 'thermo';
	var index = decodeURIComponent('%c2%b0');
	var value_label = '&deg;C';
	var decimal_point = 1;
	var diff = 1;
	var min = 50;
	var max = 300;
	if (icons_data.icon_type[icon_num] == '5') {
		diff = 10;
		min = 50;
		max = 430;
	}
	if ($('#clima' + icon_num).hasClass('humi')) {
		clima_type = 'humi';
		index = '%';
		value_label = '%';
		decimal_point = 0;
		diff = 10;
		min = 0;
		max = 1000;
	}

	setpoint = parseFloat(setpoint.substring(0, setpoint.indexOf(index))) * 10;

	if (action == 'minus') {
		setpoint = setpoint - diff;
		if (setpoint < min) {
			setpoint = setpoint + diff;
		}
	} else if (action == 'plus') {
		setpoint = setpoint + diff;
		if (setpoint > max) {
			setpoint = setpoint - diff;
		}
	}

	$('#setpoint' + icon_num).html((setpoint / 10).toFixed(decimal_point) + value_label);

	var slide_val = setpoint;
	if ((icons_data.icon_type[icon_num] == '5') || (clima_type == 'humi')) {
		slide_val = slide_val / 10;
	}
	$('#setpoint_slider_' + icon_num).slider('option', 'value', slide_val);

	sendClimaCommand(icon_num, 'set', setpoint);
}


/**
 * Modify the setpoint of clima
 * 
 * @param {type} icon_num The number of clima icon
 * @returns {undefined}
 */
function climaSetpointTimeout(icon_num) {
	var clima_type = 0;
	if ($('#clima' + icon_num).hasClass('humi')) {
		clima_type = 1;
	}
	var slider = icons_data.icon_value[icon_num][clima_type][4];
	var setpoint = slider / 10;
	var value_label = '&deg;C';
	var decimal_point = 1;
	if ($('#clima' + icon_num).hasClass('humi')) {
		value_label = '%';
		decimal_point = 0;
		setpoint = Math.floor(setpoint);
		slider = Math.floor(setpoint);
	}
	$('#setpoint' + icon_num).html(setpoint.toFixed(decimal_point) + value_label);

	if (icons_data.icon_type[icon_num] == '5') {
		slider = setpoint;
	}
	$('#setpoint_slider_' + icon_num).slider('option', 'value', slider);
}


/**
 * Send the command to thermo element
 * 
 * @param {type} num: the number of icon
 * @param {type} action: the action to do
 * @param {type} setpoint: the setpoint to set on thermostat
 */
function sendClimaCommand(icon_num, action, setpoint, clima_override) {
	var clima_type = 'thermo';
	if (clima_override) {
		clima_type = clima_override;
	} else {
		if ($('#clima' + icon_num).hasClass('humi')) {
			clima_type = 'humi';
		}
	}
	var url = location.protocol + "//" + bridgehost + '/user/action.cgi?clima=' + icon_num + '&' + clima_type + '=' + action;
	if (setpoint) {
		url += '&val=' + setpoint;
	}
	$.ajax({
		method: 'GET',
		url: url,
		async: false,
		cache: false
	});
	return false;
}



/*******************************************************************************
 ********************************************************************************
 Light page
 *******************************************************************************/

/**
 * function for set the rgb color of light.
 *
 * @param rgb The color to set in RGB HEX format
 * @param num_ico the number of icon
 */
function setRGBColor(rgb, num_ico) {
	$.ajax({method: 'GET',
		url: location.protocol + "//" + bridgehost + '/user/action.cgi?rgb=' + num_ico + '&val=' + rgb,
		async: false,
		cache: false
	});
}



/*******************************************************************************
 ********************************************************************************
 Counter Page
 *******************************************************************************/

/**
 * Function to manage the counter graph page login
 *
 * @param data The XML login data
 */
function counterAuth(data) {
	checkLogin('dom', data);
	if (logged) {
		if (isLogged('dom', data) == false) {
			logged = false;
			return false;
		}
		var loading = $('#hide_load').css('display');
		counter.instant = data.instant;
		if (loading == 'none') {
			createCounterGraph();
		}
		if (!isLogged('dom', data)) {
			location.href = location.protocol + "//" + bridgehost;
		}
	} else {
		if (isLogged('dom', data)) {
			stopPoll();
			logged = true;
			counter.instant = data.instant;
			createCounterGraph();
			startPollFile('/user/counter.json', counterAuth);
			return true;
		}
	}
}


/**
 * Function to print the counter graph or table in the counter page.
 * The type of page is discriminate by hash in URL #graph_num for graph,
 * and #table_num for table.
 * the num is module number for module, group number + 100 for group, 200
 * for compare and 202 for C02 save.
 */
var page;
function createCounterGraph() {
	page = window.location.hash;
	$('#head_menu').css('display', '');
	$('#counter').css('display', '');
	var view = $('#current').attr('class');
	if (page != '#' + view) {
		// Start loading
		$('#hide_load').css('display', '');
		$('#graph_label').css('display', 'none');
		$('#counter_graph').css('display', 'none');
		$('#counter_graph').empty();
		$('#current').attr('class', '')

		// Get the type of data to display
		page = page.substring(1, page.length).split('_');
		var now = new Date();

		var first_counter = 0;
		for (first_counter = 0; first_counter < counter.module_present; first_counter++) {
			if (counter.module_visible[first_counter] == true) {
				break;
			}
		}
		if (first_counter == counter.module_present) {
			if (counter.group_present != 0) {
				first_counter = 101;
			} else {
				if (counter.compare_present == true) {
					first_counter = 200;
				} else {
					if (counter.co2_present == true) {
						first_counter = 202;
					} else {
						// TODO niente da visualizzare
					}
				}
			}
		}

		// Control the parameter number
		if (page.length != 5) {
			var mon = (now.getMonth() + 1);
			var day = now.getDate();
			page[0] = "graph";
			page[1] = "day";
			page[2] = "value";
			page[3] = first_counter;
			page[4] = now.getFullYear() + ((mon < 10) ? '0' : '') + mon + ((day < 10) ? '0' : '') + day;
			window.location.hash = "graph_day_value_" + page[3] + "_" + page[4];
		}
		// Control the date is in the past or today
		var date = new Date(page[4].substring(0, 4), page[4].substring(4, 6) - 1, page[4].substring(6, 8));
		if (date > now) {
			var mon = now.getMonth() + 1;
			var day = now.getDate();
			page[0] = "graph";
			page[1] = "day";
			page[2] = "value";
			page[3] = first_counter;
			page[4] = now.getFullYear() + ((mon < 10) ? '0' : '') + mon + ((day < 10) ? '0' : '') + day;
			window.location.hash = "graph_day_value_" + page[3] + "_" + page[4];
		}
		if (((page[1] == 'month') || (page[1] == 'year') || (page[1] == 'history')) && (page[4].substring(6, 8) != '01')) {
			page[4] = page[4].substring(0, 6) + '01';
			window.location.hash = page[0] + "_" + page[1] + "_" + page[2] + "_" + page[3] + "_" + page[4];
		}
		if (((page[1] == 'year') || (page[1] == 'history')) && (page[4].substring(4, 8) != '0101')) {
			page[4] = page[4].substring(0, 4) + '0101';
			window.location.hash = page[0] + "_" + page[1] + "_" + page[2] + "_" + page[3] + "_" + page[4];
		}
		// Control the number of counter exist
		if ((page[3] < 0) || ((page[3] >= counter.module_present) && (page[3] <= 100)) || ((page[3] > (counter.group_present + 100)) && (page[3] != 200) && (page[3] != 202))) {
			page[3] = 0;
			window.location.hash = page[0] + "_" + page[1] + "_" + page[2] + "_" + page[3] + "_" + page[4];
		}
		// Control if co2 cost
		if ((page[3] == 202) && (page[2] == 'cost')) {
			window.location.hash = page[0] + "_" + page[1] + "_value_" + page[3] + "_" + page[4];
		}

		// Prepare the url for file request
		var year = date.getFullYear() + '';
		var mon = date.getMonth() + 1;
		var start = year.substring(2, 4) + ((mon < 10) ? '0' : '') + mon + '01';
		var period = '';
		if (page[1] == 'year') {
			period = 'month';
		} else if (page[1] == 'history') {
			period = 'years';
		} else {
			period = 'hour';
		}

		// control if data alredy in the array
		counter.compare = [];
		counter.data = [];
		var csv_url = location.protocol + "//" + bridgehost + '/user/counter_data.csv?counter=' + page[3] + '&period=' + period + '&start=' + start;
		$.ajax({method: 'GET',
			url: csv_url,
			async: false,
			cache: false
		}).done(function(csv) {
			if (csv != '') {
				counter.data = csv.csvToArray({rSep: '\n'});
				counter.data.sort(function(a, b) {
					return a[0] - b[0];
				});
			}
			if (page[3] != '200') {
				createGraph();
			} else {
				var csv_url = location.protocol + "//" + bridgehost + '/user/counter_data.csv?counter=' + (parseInt(page[3]) + 1) + '&period=' + period + '&start=' + start;
				$.ajax({method: 'GET',
					url: csv_url,
					async: false,
					cache: false
				}).done(function(csv) {
					counter.compare = csv.csvToArray({rSep: '\n'});
					counter.compare.sort(function(a, b) {
						return a[0] - b[0];
					});
					createGraph();
				});
			}
		});
	}
}


/**
 * Put the graph/table on the page
 */
function createGraph() {
	$("[name=type]").prop('disabled', '');

	// Calculate the time data
	var start;
	var step;
	var ytick = [];
	var ystep = [];

	switch (page[1]) {
		case 'day':
			start = new Date(page[4].substring(0, 4), page[4].substring(4, 6) - 1, page[4].substring(6, 8));
			start = (start.getTime() / 1000) - (start.getTimezoneOffset() * 60);
			step = 24;
			for (var i = 0; i <= step; i++) {
				ystep[i] = start + (i * 60 * 60);
				if (i == step) {
					break;
				}
				if (((i % 4) == 0) || (page[0] == 'table')) {
					ytick[i] = i;
				} else {
					ytick[i] = '';
				}
			}
			break;
		case 'month':
			start = new Date(page[4].substring(0, 4), page[4].substring(4, 6) - 1, 1);
			start = (start.getTime() / 1000) - (start.getTimezoneOffset() * 60);
			step = new Date(page[4].substring(0, 4), page[4].substring(4, 6), 0).getDate();
			for (var i = 0; i <= step; i++) {
				ystep[i] = start + (i * 24 * 60 * 60);
				if (i == step) {
					break;
				}
				if (((i % 6) == 0) || (page[0] == 'table')) {
					ytick[i] = i + 1;
				} else {
					ytick[i] = '';
				}
			}
			break;
		case 'year':
			start = new Date(page[4].substring(0, 4), 0, 1);
			start = (start.getTime() / 1000) - (start.getTimezoneOffset() * 60);
			step = 12;
			var day = new Date(page[4].substring(0, 4), 0, 0).getDate();
			ystep[0] = start;
			ytick[0] = lang67.charAt(0);
			var j = 0;
			for (var i = 1; i <= step; i++) {
				var day = new Date(page[4].substring(0, 4), i, 0).getDate();
				ystep[i] = ystep[j] + (day * 24 * 60 * 60);
				if (i == step) {
					break;
				}
				j = i;
				ytick[i] = lang67.charAt(i);
			}
			break;
		case 'history':
			start = new Date((page[4].substring(0, 4) - 4), 0, 1);
			start = (start.getTime() / 1000) - (start.getTimezoneOffset() * 60);
			step = 5;
			ystep[0] = start;
			ytick[0] = parseInt(page[4].substring(0, 4) - 4);
			var j = 0;
			for (i = 1; i <= step; i++) {
				if (ytick[i] % 4 == 0 && ((ytick[i] % 100 != 0) || (ytick[i] % 400 == 0))) {
					ystep[i] = ystep[j] + (366 * 24 * 60 * 60);
				} else {
					ystep[i] = ystep[j] + (365 * 24 * 60 * 60);
				}
				if (i == step) {
					break;
				}
				j = i;
				ytick[i] = parseInt(page[4].substring(0, 4) - 4) + i;
			}
			break;
	}

	// get the type of data to get
	var type;
	if (page[2] == 'cost') {
		type = 2;
	} else {
		type = 1;
	}

	// Prepare the data for graph
	var data = [[], [], [], []];
	var color = [];
	var max = null;
	var min = null;
	if (counter.data.length != 0) {
		var j = 0;
		while (counter.data[j][0] < start) {
			if (!(++j < counter.data.length)) {
				j--;
				break;
			}
		}
		for (var i = 0; i < step; i++) {
			data[0][i] = 0;
			while (counter.data[j][0] < ystep[i + 1]) {
				if (counter.data[j][0] >= ystep[i]) {
					data[0][i] = data[0][i] + parseFloat(counter.data[j][type]);
				}
				if (++j >= counter.data.length) {
					j--;
					break;
				}
			}
			if (i == 0) {
				max = data[0][i];
				min = data[0][i];
			}
			if (data[0][i] > max) {
				max = data[0][i];
			}
			if (data[0][i] < min) {
				min = data[0][i];
			}
			if (i % 2) {
				color[i] = "#999999";
			} else {
				color[i] = "#5e83b9";
			}
		}
	} else {
		for (var i = 0; i < step; i++) {
			data[0][i] = null;
			color[i] = "#5e83b9";
		}
	}
	if ((counter.compare.length != 0) && (page[3] == 200)) {
		var j = 0;
		while (counter.compare[j][0] < start) {
			if (!(++j < counter.compare.length)) {
				j--;
				break;
			}
		}
		for (var i = 0; i < step; i++) {
			data[1][i] = 0;
			while (counter.compare[j][0] < ystep[i + 1]) {
				if (counter.compare[j][0] >= ystep[i]) {
					data[1][i] = data[1][i] + parseFloat(counter.compare[j][type]);
				}
				if (++j >= counter.compare.length) {
					j--;
					break;
				}
			}
			if ((i == 0) && (max == null)) {
				max = data[0][i];
				min = data[0][i];
			}
			if (data[1][i] > max) {
				max = data[1][i];
			}
			if (data[1][i] < min) {
				min = data[1][i];
			}
		}
	}
	var treshold = null;
	var value_label = '';
	var label = '';
	var instant = '';
	var num = parseInt(page[3]);
	if (num < 100) {
		value_label = counter.label[num];
		instant = counter.instant[num];
		if ((num < counter.treshold[0].length) && (page[2] == 'value')) {
			switch (page[1]) {
				case 'day':
					treshold = counter.treshold[0][num][0];
					break;
				case 'month':
					treshold = counter.treshold[0][num][1];
					break;
				case 'year':
					treshold = counter.treshold[0][num][2];
					break;
				case 'history':
					treshold = counter.treshold[0][num][3];
					break;
			}
			if (treshold == 0) {
				treshold = null;
			}
		}
	} else if (num < 200) {
		value_label = counter.label[num - 100 + 15];
		instant = counter.instant[num - 100 + 15];
		if (((num - 101) < counter.treshold[1].length) && (page[2] == 'value')) {
			switch (page[1]) {
				case 'day':
					treshold = counter.treshold[1][num - 101][0];
					break;
				case 'month':
					treshold = counter.treshold[1][num - 101][1];
					break;
				case 'year':
					treshold = counter.treshold[1][num - 101][2];
					break;
				case 'history':
					treshold = counter.treshold[1][num - 101][3];
					break;
			}
			if (treshold == 0) {
				treshold = null;
			}
		}
	} else if (num == 200) {
		value_label = counter.label[counter.label.length - 2];
	} else if (num == 202) {
		value_label = counter.label[counter.label.length - 1];
		$("[name=type]").val('value').prop('disabled', 'disabled');
	}

	if (treshold != null) {
		if (treshold > max) {
			max = treshold;
		}
	}

	var pre_label = '';
	if (page[2] == 'value') {
		if ((max >= 1000) && (max < 999999)) {
			max = max / 1000;
			if (treshold != null) {
				treshold = treshold / 1000;
			}
			for (var i = 0; i < data[0].length; i++) {
				data[0][i] = data[0][i] / 1000;
				if (data[1].length != 0) {
					data[1][i] = data[1][i] / 1000;
				}
			}
			if (page[3] == '202') {
				value_label = 't';
			} else {
				pre_label = 'k';
			}
		} else if ((max >= 1000000) && (page[3] != 202)) {
			max = max / 1000000;
			if (treshold != null) {
				treshold = treshold / 1000000;
			}
			for (var i = 0; i < data[0].length; i++) {
				data[0][i] = data[0][i] / 1000000;
				if (data[1].length != 0) {
					data[1][i] = data[1][i] / 1000000;
				}
			}
			pre_label = 'M';
		}
	}

	switch (page[2]) {
		case 'value':
			value_label = pre_label + value_label;
			label = value_label;
			break;
		case 'cost':
			label = counter.currency;
			treshold = null;
			break;
	}

	if (treshold != null) {
		for (var i = 0; i < step; i++) {
			data[2][i] = treshold;
			data[3][i] = treshold * 0.75;
		}
	}

	var tickFormat = '%d';
	var tick_number = 5;
	if (max < 0.01) {
		tickFormat = '%.3f';
		max = max * 1000;
		if (((max / tick_number) % 1) != 0) {
			tickFormat = '%.4f';
		}
		max = max / 1000;
	} else if (max < 0.1) {
		tickFormat = '%.2f';
		max = max * 1000;
		if ((max % 1) != 0) {
			max = max + (1 - (max % 1));
		}
		max = max / 10;
		if (((max / tick_number) % 1) != 0) {
			tickFormat = '%.3f';
		}
		max = max / 100;
	} else if (max < 1) {
		tickFormat = '%.1f';
		max = max * 100;
		if ((max % 1) != 0) {
			max = max + (1 - (max % 1));
		}
		max = max / 10;
		if (((max / tick_number) % 1) != 0) {
			tickFormat = '%.2f';
		}
		max = max / 10;
	} else if (max < 10) {
		max = max * 10;
		if ((max % 1) != 0) {
			max = max + (1 - (max % 1));
		}
		max = max / 10;
		if (((max / tick_number) % 1) != 0) {
			tickFormat = '%.1f';
		}
	} else {
		if ((max % 1) != 0) {
			max = max + (1 - (max % 1));
		}
		if (((max / tick_number) % 1) != 0) {
			tickFormat = '%.1f';
		}
	}

	$('#graph_label').css('display', 'none');
	$('[name=type] option[value=value]').text(value_label);
	$('[name=type] option[value=cost]').text(counter.currency);
	if (page[0] == 'graph') {
		$('#counter_graph').html(html).css('height', '260px');
		$('#graph_label').css('display', '');
		$('#title_graph').html('');
		if (page[2] == 'value') {
			$('#title_graph').html(instant);
		}
		var tot_value = 0;
		for (var j = 0; j < step; j++) {
			if (data[0][j]) {
				tot_value += data[0][j];
			}
			if (counter.compare.length != 0) {
				if (data[1][j]) {
					tot_value -= data[1][j];
				}
			}
		}
		if (page[2] == 'value') {
			if ((tot_value >= 1000) && (tot_value < 999999)) {
				tot_value = tot_value / 1000;
				if (page[3] == '202') {
					label = 't';
				} else {
					label = 'k' + label;
				}
			} else if ((tot_value >= 1000000) && (page[3] != '202')) {
				tot_value = tot_value / 1000000;
				label = 'M' + label;
			}
			if (tot_value % 1) {
				if (tot_value < 1) {
					$('#tot_value').html(tot_value.toFixed(3) + label);
				} else if (tot_value > 100) {
					$('#tot_value').html(tot_value.toFixed(1) + label);
				} else {
					$('#tot_value').html(tot_value.toFixed(2) + label);
				}
			} else {
				$('#tot_value').html(tot_value.toFixed(0) + label);
			}
		} else {
			$('#tot_value').html(tot_value.toFixed(2) + label);
		}
		$('#counter_graph').css('display', '');
		graph = $.jqplot('counter_graph', data, {
			animate: !$.jqplot.use_excanvas,
			seriesDefaults: {
				seriesColors: color,
				pointLabels: {
					show: true
				},
				rendererOptions: {
					barWidth: 7,
					varyBarColor: true,
					shadowOffset: 1
				}
			},
			series: [{renderer: $.jqplot.BarRenderer}, {showMarker: false}, {color: '#FF0000', showMarker: false, lineWidth: 1.5}, {color: '#FFEE00', showMarker: false, lineWidth: 1.5}],
			axes: {
				xaxis: {
					renderer: $.jqplot.CategoryAxisRenderer,
					ticks: ytick
				},
				yaxis: {
					min: 0,
					numberTicks: (tick_number + 1),
					max: max,
					tickOptions: {
						formatString: tickFormat
					}
				}
			}
		});
	} else {
		var string = '';
		var count = [];
		if (page[2] == 'cost') {
			if (counter.data[0].length != 0) {
				var j = 0;
				while (counter.data[j][0] < start) {
					if (!(++j < counter.data.length)) {
						j--;
						break;
					}
				}
				for (var i = 0; i < step; i++) {
					count[i] = 0;
					while (counter.data[j][0] < ystep[i + 1]) {
						if (counter.data[j][0] >= ystep[i]) {
							count[i] = count[i] + parseFloat(counter.data[j][1]);
						}
						if (++j >= counter.data.length) {
							j--;
							break;
						}
					}
				}
			} else {
				for (var i = 0; i < step; i++) {
					count[i] = null;
				}
			}
		} else {
			count = data[0];
		}
		var html = '<table id="counter_table"><tbody><tr><th>' + lang310 + '</th><th' + string + '>' + label + '</th></tr>';
		if (page[3] == '200') {
			html = '<table id="counter_table"><tbody><tr><th rowspan=2>' + lang310 + '</th><th colspan=3>' + label + '</th></tr>';
			html += '<tr><th>' + lang312 + '</th><th>' + lang311 + '</th><th>' + lang313 + '</th></tr>';
		}
		for (var i = 0; i < step; i++) {
			if (!data[0][i]) {
				data[0][i] = 0
			}
			data[0][i] = decimal_limit(data[0][i], 3);
			if (treshold != null) {
				if (treshold == 0) {
					string = '';
				} else if (count[i] <= (0.75 * treshold)) {
					string = ' style="background:#0E0;"';
				} else if (count[i] <= (treshold)) {
					string = ' style="background:#FE0;"';
				} else {
					string = ' style="background:#F44;"';
				}
				if (page[1] == 'day') {
					html += '<tr><td>' + ytick[i] + '-' + (ytick[i] + 1) + '</td><td' + string + '>' + data[0][i] + '</td></tr>';
				} else {
					html += '<tr><td>' + ytick[i] + '</td><td' + string + '>' + data[0][i] + '</td></tr>';
				}
			} else {
				if (page[3] == '200') {
					if (data[0][i] > data[1][i]) {
						string = ' style="background:#F44;"';
					} else {
						string = ' style="background:#0E0;"';
					}
					data[1][i] = decimal_limit(data[1][i], 3);
					if (page[1] == 'day') {
						html += '<tr><td>' + ytick[i] + '-' + (ytick[i] + 1) + '</td><td>' + data[0][i] + '</td><td>' + data[1][i] + '</td><td' + string + '>' + decimal_limit((data[0][i] - data[1][i]), 3) + '</td></tr>'
					} else {
						html += '<tr><td>' + ytick[i] + '</td><td>' + data[0][i] + '</td><td>' + data[1][i] + '</td><td' + string + '>' + decimal_limit((data[0][i] - data[1][i]), 3) + '</td></tr>'
					}
				} else {
					if (page[1] == 'day') {
						html += '<tr><td>' + ytick[i] + '-' + (ytick[i] + 1) + '</td><td' + string + '>' + data[0][i] + '</td></tr>';
					} else {
						html += '<tr><td>' + ytick[i] + '</td><td' + string + '>' + data[0][i] + '</td></tr>';
					}
				}
			}
		}
		html += '</tbody></table>';
		$('#counter_graph').html(html).css('height', 'auto');
	}

	$('#counter_graph').css('display', '');

	// Prepare the counter navigation button
	var name;
	var counter_num = parseInt(page[3], 10);

	//// MODULE
	if ((counter_num >= 0) && (counter_num < counter.module_present)) {
		name = counter.module[counter_num];

		// PREVIOUS
		var find_prev = false;
		$('#menu_back').attr('href', 'javascript:void(0);');
		if (counter_num > 0) {
			for (i = (counter_num - 1); i >= 0; i--) {
				if (counter.module_visible[i]) {
					$('#menu_back').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_' + i + '_' + page[4]);
					find_prev = true;
					break;
				}
			}
		}
		if (!find_prev) {
			if (counter.co2_present) {
				$('#menu_back').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_202_' + page[4]);
			} else if (counter.compare_present) {
				$('#menu_back').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_200_' + page[4]);
			} else if (counter.group_present != 0) {
				$('#menu_back').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_' + (counter.group_present + 100) + '_' + page[4]);
			} else {
				for (i = (counter.module_present - 1); i >= 0; i--) {
					if (counter.module_visible[i]) {
						$('#menu_back').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_' + i + '_' + page[4]);
						break;
					}
				}
			}
		}

		// NEXT
		var find_next = false;
		$('#menu_next').attr('href', 'javascript:void(0);');
		if (counter_num < counter.module_present) {
			for (i = (counter_num + 1); i < counter.module_present; i++) {
				if (counter.module_visible[i]) {
					$('#menu_next').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_' + i + '_' + page[4]);
					find_next = true;
					break;
				}
			}
		}
		if (!find_next) {
			if (counter.group_present != 0) {
				$('#menu_next').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_' + (100 + 1) + '_' + page[4]);
			} else if (counter.compare_present) {
				$('#menu_next').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_200_' + page[4]);
			} else if (counter.co2_present) {
				$('#menu_next').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_202_' + page[4]);
			} else {
				for (i = 0; i < counter.module_present; i++) {
					if (counter.module_visible[i]) {
						$('#menu_next').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_' + i + '_' + page[4]);
						break;
					}
				}
			}
		}

		//// GROUP
	} else if ((counter_num > 100) && (counter_num <= (counter.group_present + 100))) {
		num = counter_num - 100;
		name = counter.group[num - 1];

		// PREVIOUS
		var find_prev = false;
		$('#menu_back').attr('href', 'javascript:void(0);');
		if (num > 1) {
			$('#menu_back').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_' + (num + 100 - 1) + '_' + page[4]);
		} else {
			for (i = (counter.module_present - 1); i >= 0; i--) {
				if (counter.module_visible[i]) {
					$('#menu_back').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_' + i + '_' + page[4]);
					find_prev = true;
					break;
				}
			}
			if (!find_prev) {
				if (counter.co2_present) {
					$('#menu_back').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_202_' + page[4]);
				} else if (counter.compare_present) {
					$('#menu_back').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_200_' + page[4]);
				} else if (counter.group_present != 0) {
					$('#menu_back').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_' + (counter.group_present + 100) + '_' + page[4]);
				}
			}
		}

		// NEXT
		var find_next = false;
		$('#menu_next').attr('href', 'javascript:void(0);');
		if (num < counter.group_present) {
			$('#menu_next').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_' + (num + 100 + 1) + '_' + page[4]);
		} else {
			if (counter.compare_present) {
				$('#menu_next').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_200_' + page[4]);
				find_next = true;
			} else if (counter.co2_present) {
				$('#menu_next').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_202_' + page[4]);
				find_next = true;
			} else {
				for (i = 0; i < counter.module_present; i++) {
					if (counter.module_visible[i]) {
						$('#menu_next').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_' + i + '_' + page[4]);
						find_next = true;
						break;
					}
				}
			}
			if ((!find_next) && (counter.group_present != 0)) {
				$('#menu_back').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_' + (100 + 1) + '_' + page[4]);
			}
		}

		//// COMPARE
	} else if (counter_num == 200) {
		name = lang314;

		// PREVIOUS
		var find_prev = false;
		$('#menu_back').attr('href', 'javascript:void(0);');
		if (counter.group_present != 0) {
			$('#menu_back').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_' + (counter.group_present + 100) + '_' + page[4]);
		} else {
			for (i = (counter.module_present - 1); i >= 0; i--) {
				if (counter.module_visible[i]) {
					$('#menu_back').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_' + i + '_' + page[4]);
					find_prev = true;
					break;
				}
			}
		}
		if (!find_prev) {
			if (counter.co2_present) {
				$('#menu_next').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_202_' + page[4]);
			}
		}


		// NEXT
		var find_next = false;
		$('#menu_next').attr('href', 'javascript:void(0);');
		if (counter.co2_present) {
			$('#menu_next').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_202_' + page[4]);
			find_next = true;
		} else {
			for (i = 0; i < counter.module_present; i++) {
				if (counter.module_visible[i]) {
					$('#menu_next').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_' + i + '_' + page[4]);
					find_next = true;
					break;
				}
			}
		}
		if (!find_next) {
			if (counter.group_present != 0) {
				$('#menu_back').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_' + (100 + 1) + '_' + page[4]);
			} else if (counter.compare_present) {
				$('#menu_next').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_200_' + page[4]);
			}
		}

		//// CO2
	} else if (counter_num == 202) {
		name = lang315;

		// PREVIOUS
		var find_prev = false;
		$('#menu_back').attr('href', 'javascript:void(0);');
		if (counter.compare_present) {
			$('#menu_back').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_200_' + page[4]);
		} else if (counter.group_present != 0) {
			$('#menu_back').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_' + (counter.group_present + 100) + '_' + page[4]);
		} else {
			for (i = (counter.module_present - 1); i >= 0; i--) {
				if (counter.module_visible[i]) {
					$('#menu_back').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_' + i + '_' + page[4]);
					find_prev = true;
					break;
				}
			}
		}

		// NEXT
		var find_next = false;
		$('#menu_next').attr('href', 'javascript:void(0);');
		for (i = 0; i < counter.module_present; i++) {
			if (counter.module_visible[i]) {
				$('#menu_next').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_' + i + '_' + page[4]);
				find_next = true;
				break;
			}
		}
		if (!find_next) {
			if (counter.group_present != 0) {
				$('#menu_next').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_' + (100 + 1) + '_' + page[4]);
			} else if (counter.compare_present) {
				$('#menu_next').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_200_' + page[4]);
			}
		}
	}

	$('#menu_name').html(name);


	// Prepare the date navigation button
	date = '';
	if (page[1] == 'day') {
		date = page[4].substring(6, 8) + '/';
	}
	if ((page[1] == 'month') || (page[1] == 'day')) {
		date = date + (page[4].substring(4, 6)) + '/';
	}
	date = date + page[4].substring(0, 4);
	$('#view_date').html(date);


	var date = new Date(page[4].substring(0, 4), page[4].substring(4, 6) - 1, page[4].substring(6, 8));
	var now = new Date();
	var limit = new Date(now.getFullYear() - 4, 0, 1);

	var date_step = (ystep[step] - ystep[0]) * 1000;
	var new_date;
	if (page[1] == 'year') {
		var year = parseInt(page[4].substring(0, 4)) - 1;
		if (year % 4 == 0 && ((year % 100 != 0) || (year % 400 == 0))) {
			new_date = new Date(date.getTime() - (366 * 24 * 60 * 60 * 1000));
		} else {
			new_date = new Date(date.getTime() - (365 * 24 * 60 * 60 * 1000));
		}
	} else if (page[1] == 'month') {
		new_date = new Date(page[4].substring(0, 4), page[4].substring(4, 6) - 2, 1);
	} else {
		new_date = new Date(date.getTime() - date_step);
	}
	$('#date_prev').attr('href', 'javascript:void(0)');
	if (new_date >= limit) {
		mon = (new_date.getMonth() + 1);
		day = new_date.getDate();
		$('#date_prev').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_' + page[3] + '_' + new_date.getFullYear() + ((mon < 10) ? '0' : '') + mon + ((day < 10) ? '0' : '') + day);
	}
	var date_step = (ystep[step] - ystep[0]) * 1000;
	if (page[1] == 'year') {
		var year = parseInt(page[4].substring(0, 4));
		if (year % 4 == 0 && ((year % 100 != 0) || (year % 400 == 0))) {
			new_date = new Date(date.getTime() + (366 * 24 * 60 * 60 * 1000));
		} else {
			new_date = new Date(date.getTime() + (365 * 24 * 60 * 60 * 1000));
		}
	} else if (page[1] == 'month') {
		new_date = new Date(page[4].substring(0, 4), page[4].substring(4, 6), 1);
	} else {
		new_date = new Date(date.getTime() + date_step);
	}
	$('#date_next').attr('href', 'javascript:void(0)');
	if (new_date < now) {
		mon = (new_date.getMonth() + 1);
		day = new_date.getDate();
		$('#date_next').attr('href', '#' + page[0] + '_' + page[1] + '_' + page[2] + '_' + page[3] + '_' + new_date.getFullYear() + ((mon < 10) ? '0' : '') + mon + ((day < 10) ? '0' : '') + day);
	}
	// Go to view
	$('#current').attr('class', page[0] + '_' + page[1] + '_' + page[2] + '_' + page[3] + '_' + page[4]);
	$('[name=period]').val(page[1]);
	$('[name=type]').val(page[2]);
	$('[name=vis]').val(page[0]);
	$('#hide_load').css('display', 'none');
}

/********************************************************************
 Scenario
 *********************************************************************/

/**
 * Send the action request to bridge
 * 
 * @param {type} string: the action message to bridge
 */
var timeout_message = null;
var timeout_window = null;
function sendScenarioAction(string) {
	execute = string;
	if (icons_data.icon_protect[string] != '0') {
		$.ajax({method: 'GET',
			url: location.protocol + '//' + bridgehost + '/login.json',
			type: 'json',
			async: false,
			cache: false}).success(function(data) {
			if (!isLogged('alm', data)) {
				if (!$('#protected-login').dialog('isOpen')) {
					$('#password').val('').removeClass('ui-state-error');
					$('#protected-login').dialog('open');
					$('#login_scenario_text').html('');
				} else {
					if (!timeout_window) {
						$('#protected-login input').addClass('ui-state-error');
						$('#login_scenario_text').html(vedoMessageLog(data));
					}
					timeout_window = setTimeout(function() {
						timeout_window = null;
						sendScenarioAction(execute);
					}, 3000);
					if (timeout_message) {
						clearTimeout(timeout_message);
					}
					timeout_message = setTimeout('$(\'#login_scenario_text\').html(\'\')', 20000);
				}
			} else {
				$('#protected-login').dialog('close');
				$.ajax({method: 'GET',
					url: location.protocol + '//' + bridgehost + '/user/action.cgi?scenario=' + string,
					async: false,
					cache: false
				}).success(function(data) {
					if (data == '3') {
						$('#forced-area').dialog('open');
					} else {
						execute = null;
					}
				});
			}
		});
	} else {
		execute = null;
		$.ajax({method: 'GET',
			url: location.protocol + '//' + bridgehost + '/user/action.cgi?scenario=' + string,
			async: false,
			cache: false
		});
	}
	return false;
}


/*******************************************************************************
 ********************************************************************************
 Setup Page
 *******************************************************************************/

/**
 * Function for send the configuration form in async mode.
 *
 * @param form The form to serialize for send
 * @param type The configuration page type
 * @param callback The optional function to call when form is sent
 * @return The status of form sent
 */
function sendConfigForm(form, type, callback) {
	var post_data;
	form.find('[name=save]').val('1');
	if ((type == 'rule') || (type == 'scenario') || (type == 'timer')) {
		post_data = $('[name=save], select:visible, input:visible, .rgb_act:visible input').serialize();
	} else {
		post_data = form.serialize();
	}
	$('#message_text').html(lang25);
	$.ajax({method: 'POST',
		url: location.protocol + '//' + bridgehost + '/setup/config.cgi?' + type,
		data: post_data}
	).done(function(data) {
		if (data != '0') {
			$('#message_text').html(lang27);
			if (callback) {
				if (type == 'network') {
					callback(data, $('[name=host]').val() + ':' + $('[name=http]').val());
				} else {
					callback(data);
				}
			}
		} else {
			$('#message_text').html(lang26);
		}
	});
	return false;
}

/**
 * Go to new page for setup
 * @param getnumber: the number of setting element
 * @param getelement: the subelement of setting element
 */
function updateConfigForm(getnumber, getelement) {
	$('#submit_btn', this).attr('disabled', true);
	$('#life').html(lang30);
	var find = window.location.href.indexOf('?');
	if (find < 0) {
		find = 0
	}
	url = window.location.href.slice(0, find);
	url = url + '?num=' + (parseInt(getnumber));
	if (getelement) {
		url = url + '&element=' + (parseInt(getelement));
	}
	window.location.href = url;
}


/********************************************************************
 Date time page
 ********************************************************************/

/**
 * Update the ntp config config
 */
function update_ntp() {
	if ($('#ntp').is(':checked')) {
		$('#ntp_server').css('display', '');
		$('[name=date]').prop('disabled', 'disabled');
		$('[name=time]').prop('disabled', 'disabled');
	} else {
		$('#ntp_server').css('display', 'none');
		$('[name=date]').prop('disabled', '');
		$('[name=time]').prop('disabled', '');
	}
	update_legal();
}
/**
 * Update the setup visualization when change legal mode
 */
function update_legal() {
	$('#show_man_dst').css('display', 'none');
	$('#show_legal').css('display', 'none');
	if ($('#legal').val() == 2) {
		$('#show_legal').css('display', '');
	} else if ($('#legal').val() == 0) {
		$('#show_man_dst').css('display', '');
		$('#dst_man').attr('checked', false);
	}
}
/**
 * Manage the legal time when NTP is disabled
 */
function update_dst_man() {
	var string = $('#time').val();
	var hour = parseInt(string.substring(0, 2));
	var min = string.substring(3, 5);
	var date = $('[name=date]').val();
	if ($('[name=dst_man]').is(':checked')) {
		hour++;
	} else {
		hour--;
	}
	if (hour < 0) {
		hour = 24 + hour;
		var date = $('#date').datepicker('getDate');
		date.setDate(date.getDate() - 1);
		$('#date').datepicker('setDate', date);
	} else if (hour >= 24) {
		hour = hour % 24;
		var date = $('#date').datepicker('getDate');
		date.setDate(date.getDate() + 1);
		$('#date').datepicker('setDate', date);
	}
	if (hour < 10) {
		hour = '0' + hour;
	}
	$('#time').val(hour + ':' + min);
}


/********************************************************************
 dynamic DNS page
 ********************************************************************/

/**
 * Update the visualization on dynamic dns page
 */
function updateDDNS() {
	if ($('[name=enable]').is(':checked')) {
		$('.vis_ddns').css('display', '');
		if ($('[name=server]').val() == 'update.comelitdns.com') {
			$('.vis_comelit').css('display', '');
		} else {
			$('.vis_comelit').css('display', 'none');
		}
	} else {
		$('.vis_ddns').css('display', 'none');
	}
}

/********************************************************************
 Timer page
 ********************************************************************/

/**
 * Manage the display of end time for virtual timer,
 * and the action for the single shot
 */
function displayEndTimer() {
	if ($('#tipo_0').is(':checked')) {
		$('#vis_end_timer').css('display', 'none');
		$('#vis_dest').css('display', '');
	} else {
		$('#vis_dest').css('display', 'none');
		$('#vis_end_timer').css('display', '');
	}
}

/**
 * Function for check all day flags in timer page.
 */
function allDayCheck() {
	var id = $(this).attr('name');
	if (id == "start_day_all") {
		if ($('[name=start_day_all]').prop('checked')) {
			for (var i = 0; i < 7; i++) {
				$('[name=start_day' + i + ']').prop('checked', 'checked');
			}
		} else {
			for (var i = 0; i < 7; i++) {
				$('[name=start_day' + i + ']').prop('checked', '');
			}
		}
	}
	if (id == "end_day_all") {
		if ($('[name=end_day_all]').prop('checked')) {
			for (var i = 0; i < 7; i++) {
				$('[name=end_day' + i + ']').prop('checked', 'checked');
			}
		} else {
			for (var i = 0; i < 7; i++) {
				$('[name=end_day' + i + ']').prop('checked', '');
			}
		}
	}
}

/**
 * Modify the all day flags by days checked
 */
function enableDayCheck() {
	var all = 0;
	for (var i = 0; i < 7; i++) {
		if ($('[name=start_day' + i + ']').prop('checked')) {
			all++;
		}
	}
	if (all == 7) {
		$('[name=start_day_all]').prop('checked', 'checked');
	} else {
		$('[name=start_day_all]').prop('checked', '');
	}
	all = 0;
	for (var i = 0; i < 7; i++) {
		if ($('[name=end_day' + i + ']').prop('checked')) {
			all++;
		}
	}
	if (all == 7) {
		$('[name=end_day_all]').prop('checked', 'checked');
	} else {
		$('[name=end_day_all]').prop('checked', '');
	}
}

/********************************************************************
 Network page
 ********************************************************************/

/**
 * Display the network parameter only if DHCP is disabled
 */
function dhcpEnabled() {
	var disable = $('#form_setup').find('[name=dhcp]').is(':checked');
	$('#form_setup').find('[name=ip]').prop('disabled', disable);
	$('#form_setup').find('[name=gw]').prop('disabled', disable)
	$('#form_setup').find('[name=subnet]').prop('disabled', disable)
	$('#form_setup').find('[name=dns1]').prop('disabled', disable)
	$('#form_setup').find('[name=dns2]').prop('disabled', disable)
}

/********************************************************************
 General parameter
 ********************************************************************/

/**
 * Change display alarm parameter in base of selected system
 */
function displayAlarmType() {
	switch ($('[name=all_p]').val()) {

		case '0'://NO
			$('#alarm_all').css('display', 'none');
			break;

		case '1'://Safe
			$('#alarm_all').css('display', '');
			$('#safe').css('display', '');
			$('#vedo').css('display', 'none');
			break;

		case '2'://VEDO
			$('#alarm_all').css('display', '');
			$('#safe').css('display', 'none');
			$('#vedo').css('display', '');
			break;
	}
}

/**
 * Display the Ip if vedo is enable on TCP
 */
function dispVedoIp() {
	if ($('[name=vd_tx]').val() == '1') {
		$('#vedo_485').css('display', 'none');
		$('#vedo_ip').css('display', '');
	} else {
		$('#vedo_ip').css('display', 'none');
		$('#vedo_485').css('display', '');
	}
}

/**
 * Display the zone input if enable the domotic zone command safe areas
 */
function dispZoneAlarm() {
	if ($('[name=ins_b]').is(':checked') || $('[name=dis_b]').is(':checked')) {
		$('#zona').css('display', '');
	} else {
		$('#zona').css('display', 'none');
	}
}


/********************************************************************
 Counter Page
 ********************************************************************/

/**
 * Update the displayed row when change hour on table
 */
function counterFareUpdate() {
	$('.fare_line').css('display', 'none');
	var prev = 0;
	for (var i = 0; i < 10; i++) {
		var sel = parseInt($('[name=end' + i + ']').val());
		if (sel < prev) {
			prev++;
			$('[name=end' + i + ']').val(prev);
			$('#start' + (i + 1)).html(prev);
			sel = prev;
		} else {
			prev = sel;
		}
		$('#line' + i).css('display', '');
		if (sel == 24) {
			break;
		}
	}
}

/**
 * Manage the start hour of fare table
 */
function counterFareStart() {
	for (var i = 0; i < 10; i++) {
		if (i != 0) {
			$('#start' + i).html(period[i - 1]);
		}
		$('[name=end' + i + ']').val(period[i]);
		for (var j = 0; j < 7; j++) {
			console.log(i + ' ' + j)
			$('[name=fare' + i + j + ']').val(counter_fare[j][i]);
		}
	}
	counterFareUpdate();
}

/**
 * Create the display table for display counter page
 */
function createCounterDispaly() {
	var html = '';
	for (area_num = 0; area_num < data['module_present']; area_num++) {
		vis = '';
		if (data['module_visible'][area_num]) {
			vis = "checked=\"checked\"";
		}
		html += "<div class=\"cell\">\
<div class=\"col_sx\"><input type=\"text\" name=\"desc_" + area_num + "\" maxlength=\"15\" length=\"15\" value=\"" + data['module'][area_num] + "\" /></div>\
<div class=\"col_dx\"><input type=\"checkbox\" name=\"disp_" + area_num + "\" " + vis + " /></div>\
</div>";
	}
	for (area_num = 0; area_num < data['group_present']; area_num++) {
		html += "<div class=\"cell\">\
<div class=\"col_sx\"><input type=\"text\" name=\"desc_" + (area_num + 101) + "\" maxlength=\"15\" length=\"15\" value=\"" + data['group'][area_num] + "\" /></div>\
<div class=\"col_dx\"><input type=\"checkbox\" name=\"disp_" + (area_num + 101) + "\" checked=\"checked\" disabled=\"disabled\" /></div>\
</div>";
	}
	$('#counter_display').html(html);
}

/*******************************************************************************
 *******************************************************************************
 *  Rule Enable Page
 ******************************************************************************/

/**
 * Create the display table for display counter page
 */
function createRuleEnableDispaly() {
	var html = '';
	for (var rule_num = 0; rule_num < data['rule'].length; rule_num++) {
		html += "<div class=\"cell\"";
		var vis = '';
		if (!data['rule'][rule_num]) {
			html += " style=\"display:none\"";
		}
		if (data['enable'][rule_num] == '1') {
			vis += "checked=\"checked\"";
		}
		html += "><div class=\"col_sx\">" + data['rule'][rule_num] + "</div>\
<div class=\"col_dx\"><input type=\"checkbox\" name=\"enable_" + rule_num + "\" " + vis + " /></div>\
</div>";
	}
	$('#rules_display').html(html);
}


/*******************************************************************************
 ********************************************************************************
 Upgrade page
 *******************************************************************************/


/**
 * Manage the string displayed on upgrade page
 * 
 * @param {type} permission
 */
function upgradeLoadPage(permission) {
	$('#form').css('display', 'none');
	$('#done').css('display', 'none');
	$('#not_auth').css('display', 'none');
	if (!permission) {
		$('#not_auth').css('display', '');
		return;
	}
	var qsParm = getParams();
	if (qsParm['done']) {
		$('#life_error').css('display', 'none');
		$('#life').css('display', '');
		$('#done').css('display', '');
		if ($('#page_content')) {
			$('#page_content').css('display', '');
			$('#logout').css('display', 'none');
		}
		$('#life').html(lang34); // Upgrade
		upgrade_timer = 60;
		upgradeTimer();
		stopPoll();
	} else {
		$('#form').css('display', '');
		startPollFile('/login.json', checkLoginAdm);
	}
}

/**
 * Contdown for reload page after upgrade
 */
function upgradeTimer() {
	if (upgrade_timer == 0) {
		setTimeout("location.href = '/index.htm';", 500);
	} else {
		setTimeout(upgradeTimer, 1000);
	}
	$('#time').html(upgrade_timer.toString());
	upgrade_timer--;
}


/*******************************************************************************
 ********************************************************************************
 Vedo alarm Page
 *******************************************************************************/

/********************************************************************
 Vedo index
 ********************************************************************/

var vedo_area_data = {
	description: [],
	present: [],
	ready: [],
	set: [],
	alarm: [],
	alarm_memory: [],
	sabotage: [],
	anomaly: [],
	in_time: [],
	out_time: [],
	vedo_auth: []
};

/**
 * Manage the login in the vedo index page and update the status
 * 
 * @param {type} data
 */
function vedoIndexAuth(data) {
	checkLoginVedo(data);
	if (logged) {
		if (isLogged('alm', data) == false) {
			logged = false;
			return false;
		}
		if (data.zone_open == 1) {
			if (zone_blink == null) {
				zone_blink = setInterval(function() {
					if ($('#stat_system div').hasClass('icons')) {
						$('#stat_system div').removeClass('icons');
					} else {
						$('#stat_system div').addClass('icons');
					}
				}, 1000);
			}
		} else {
			if (zone_blink) {
				clearInterval(zone_blink);
				zone_blink = null;
				$('#stat_system div').addClass('icons');
			}
		}
		vedo_area_data.ready = data.ready;
		vedo_area_data.set = data.armed;
		vedo_area_data.alarm = data.alarm;
		vedo_area_data.alarm_memory = data.alarm_memory;
		vedo_area_data.sabotage = data.sabotage;
		vedo_area_data.anomaly = data.anomaly;
		vedo_area_data.in_time = data.in_time;
		vedo_area_data.out_time = data.out_time;
		vedo_area_data.vedo_auth = data.vedo_auth;
		vedoAreeUpdate();
	} else {
		if (isLogged('alm', data)) {
			stopPoll();
			logged = true;
			vedoIndexCreate();
			startPollFile('/user/vedo_area_stat.json', vedoIndexAuth);
			return true;
		}
	}
}


/**
 * Function for create the areas button in home page
 */
function vedoIndexCreate() {
	$.ajax({method: 'GET',
		url: location.protocol + '//' + bridgehost + '/user/vedo_area_desc.json',
		dataType: 'json',
		async: false,
		cache: false
	}).done(function(data) {
		vedo_area_data.description = data.description;
		vedo_area_data.present = data.present;
		vedo_area_data.vedo_auth = data.vedo_auth;

		var info_visibility = '';
		if (qsParm['app']) {
			info_visibility = ' style="visibility:hidden"';
		}

		var html = '';
		for (var area_num = 0; area_num < vedo_area_data.present.length; area_num++) {
			if (vedo_area_data.present[area_num] == 0) {
				continue;
			}
			html += '<button id="button_area_' + area_num + '" class="button long_button bridge_button area_button">';
			html += '<span class="area_desc">' + vedo_area_data.description[area_num] + '</span>';
			html += '<span class="area_status" id="area_desc_' + area_num + '"></span></button>';
			html += '<div class="vedo_command" id="vedo_command_' + area_num + '">';
			html += '<a class="button vedo_command_button unset" id="unset_' + area_num + '" href="#" onclick="sendVedoCommand(\'dis\', ' + area_num + ');return false;"><div class="icons">DIS</div></a>';
			html += '<a class="button vedo_command_button status"' + info_visibility + ' id="stat_' + area_num + '" href="/user/vedo_zone.htm#area_' + area_num + '"><div class="icons"></div><span>' + lang63 + '</span></a>';
			html += '<a class="button vedo_command_button set" id="tot_' + area_num + '" href="#" onclick="checkVedoForcing(\'tot\', ' + area_num + ');return false;"><div class="icons">TOT</div></a>';
			html += '<a class="button vedo_command_button partial p1" id="p1_' + area_num + '" href="#" onclick="checkVedoForcing(\'p1\', ' + area_num + ');return false;"><div class="icons"></div><span>P1</span></a>';
			html += '<a class="button vedo_command_button partial p2" id="p2_' + area_num + '" href="#" onclick="checkVedoForcing(\'p2\', ' + area_num + ');return false;"><div class="icons"></div><span>P2</span></a>';
			html += '<a class="button vedo_command_button partial p12" id="p12_' + area_num + '" href="#" onclick="checkVedoForcing(\'p12\', ' + area_num + ');return false;"><div class="icons"></div><span>P1+P2</span></a>';
			html += '</div>';
		}

		$('#areas').html(html);

		$('.bridge_button').click(function() {
			var num = $(this).attr('id').split('_')[2];
			if ($('#vedo_command_' + num).css('height') != '130px') {
				$('.vedo_command').css('height', 0);
				$('#vedo_command_' + num).css('height', '130px');
			} else {
				$('.vedo_command').css('height', 0);
			}
		});
	});
}


/**
 * Function for create the areas button in home page
 */
var tabella_pronta = {
	p1: [],
	p2: [],
	p12: [],
	tot: []
};
function vedoAreeUpdate() {
	var aree_tot = vedo_area_data.description.length;

	// Reset della tabella sistema pronto
	tabella_pronta['p1'][8] = true;
	tabella_pronta['p2'][8] = true;
	tabella_pronta['p12'][8] = true;
	tabella_pronta['tot'][8] = true;

	var num_areas = 0;
	var alarm_area = 0;
	var memory_area = 0;
	var sabotage_area = 0;
	var in_time_area = 0;
	var ins_tot_area = 0;
	var active_area = 0;

	// Check the status of all areas
	for (var area_num = 0; area_num < aree_tot; area_num++) {
		tabella_pronta['p1'][area_num] = ((((vedo_area_data.ready[area_num] % 10) & 1) == 0) && (vedo_area_data.ready[area_num] < 10));
		tabella_pronta['p2'][area_num] = ((((vedo_area_data.ready[area_num] % 10) & 2) == 0) && (vedo_area_data.ready[area_num] < 10));
		tabella_pronta['p12'][area_num] = ((((vedo_area_data.ready[area_num] % 10) & 3) == 0) && (vedo_area_data.ready[area_num] < 10));
		tabella_pronta['tot'][area_num] = ((((vedo_area_data.ready[area_num] % 10) & 4) == 0) && (vedo_area_data.ready[area_num] < 10));
		tabella_pronta['p1'][8] &= tabella_pronta['p1'][area_num];
		tabella_pronta['p2'][8] &= tabella_pronta['p2'][area_num];
		tabella_pronta['p12'][8] &= tabella_pronta['p12'][area_num];
		tabella_pronta['tot'][8] &= tabella_pronta['tot'][area_num];

		// Update the areas
		if (vedo_area_data.present[area_num] != 0) {
			num_areas++;
		}

		var area_status = 0;

		$('#button_area_' + area_num).removeClass('partial total alarm');
		$('#tot_' + area_num).removeClass('active');
		$('#p1_' + area_num).removeClass('active');
		$('#p2_' + area_num).removeClass('active');
		$('#p12_' + area_num).removeClass('active');

		// Check the area is disarmed
		if ((vedo_area_data.present[area_num] != 0) && (vedo_area_data.set[area_num] != 0)) {
			active_area++;
		} else {
			area_status = 0;
		}
		// Check if area is not ready
		if ((vedo_area_data.present[area_num] != 0) && (vedo_area_data.ready[area_num] > 10)) {
			area_status = 1;
		}
		// Ready button
		$('#p1_' + area_num).removeClass('not_ready');
		$('#p2_' + area_num).removeClass('not_ready');
		$('#p12_' + area_num).removeClass('not_ready');
		$('#tot_' + area_num).removeClass('not_ready');
		if (((vedo_area_data.ready[area_num] % 10) & 1) || (vedo_area_data.ready[area_num] >= 10)) {
			$('#p1_' + area_num).addClass('not_ready');
		}
		if (((vedo_area_data.ready[area_num] % 10) & 2) || (vedo_area_data.ready[area_num] >= 10)) {
			$('#p2_' + area_num).addClass('not_ready');
		}
		if (((vedo_area_data.ready[area_num] % 10) & 3) || (vedo_area_data.ready[area_num] >= 10)) {
			$('#p12_' + area_num).addClass('not_ready');
		}
		if (((vedo_area_data.ready[area_num] % 10) & 4) || (vedo_area_data.ready[area_num] >= 10)) {
			$('#tot_' + area_num).addClass('not_ready');
		}
		// Check if area is in P2
		if ((vedo_area_data.present[area_num] != 0) && ((vedo_area_data.set[area_num] & 2) != 0)) {
			$('#p2_' + area_num).addClass('active');
			area_status = 2;
		}
		// Check if area is in P1
		if ((vedo_area_data.present[area_num] != 0) && ((vedo_area_data.set[area_num] & 1) != 0)) {
			$('#p1_' + area_num).addClass('active');
			area_status = 3;
		}
		// Check if area is in P1+P2
		if ((vedo_area_data.present[area_num] != 0) && ((vedo_area_data.set[area_num] & 3) == 3)) {
			$('#p1_' + area_num).removeClass('active');
			$('#p2_' + area_num).removeClass('active');
			$('#p12_' + area_num).addClass('active');
			area_status = 4;
		}
		// Check the area is TOT
		if ((vedo_area_data.present[area_num] != 0) && ((vedo_area_data.set[area_num] & 4) != 0)) {
			$('#tot_' + area_num).addClass('active');
			ins_tot_area++;
			area_status = 5;
		}
		// Check if area is in exit time
		if ((vedo_area_data.present[area_num] != 0) && (vedo_area_data.out_time[area_num] == 1)) {
			in_time_area++;
			area_status = 6;
		}
		// Check if area is sabotage
		if ((vedo_area_data.present[area_num] != 0) && (vedo_area_data.sabotage[area_num] == 1)) {
			sabotage_area++;
			area_status = 7;
		}
		// Check if have alarm memory
		if ((vedo_area_data.present[area_num] != 0) && (vedo_area_data.alarm_memory[area_num] == 1)) {
			memory_area++;
			area_status = 8;
		}
		// Check if area have alarm active
		if ((vedo_area_data.present[area_num] != 0) && (vedo_area_data.alarm[area_num] == 1)) {
			alarm_area++;
			area_status = 9;
		}

		switch (area_status) {
			case 0: // unset
				$('#area_desc_' + area_num).html(lang350);
				break;
			case 1: // not ready
				$('#area_desc_' + area_num).html(lang349);
				$('#button_area_' + area_num).removeClass('partial total alarm');
				break;
			case 2: // P2
				$('#area_desc_' + area_num).html(lang347);
				$('#button_area_' + area_num).addClass('partial');
				break;
			case 3: // P1
				$('#area_desc_' + area_num).html(lang346);
				$('#button_area_' + area_num).addClass('partial');
				break;
			case 4: // P1+P2
				$('#area_desc_' + area_num).html(lang348);
				$('#button_area_' + area_num).addClass('partial');
				break;
			case 5: // TOT
				$('#area_desc_' + area_num).html(lang345);
				$('#button_area_' + area_num).addClass('total');
				break;
			case 6: // exit
				$('#area_desc_' + area_num).html(lang344);
				$('#button_area_' + area_num).removeClass('partial total alarm');
				break;
			case 7: // sabotage
				$('#area_desc_' + area_num).html(lang351);
				$('#button_area_' + area_num).addClass('alarm');
				break;
			case 8: // Alarm memory
				$('#area_desc_' + area_num).html(lang73);
				$('#button_area_' + area_num).addClass('alarm');
				break;
			case 9: // Alarm active
				$('#area_desc_' + area_num).html(lang76);
				$('#button_area_' + area_num).addClass('alarm');
				break;
		}
	}

	$('#padlock').removeClass('partial total alarm');

	// System status
	if (alarm_area > 0) {  // Alarm
		$('#padlock').addClass('alarm');
		$('#system_status').html(lang356);
	} else if (memory_area > 0) {  // Memory alarm
		$('#padlock').addClass('alarm');
		$('#system_status').html(lang343);
	} else if (sabotage_area > 0) {  // Sabotage
		$('#padlock').addClass('alarm');
		$('#system_status').html(lang357);
	} else if (in_time_area > 0) {  // Out Time
		$('#system_status').html(lang353);
	} else if (ins_tot_area == num_areas) {  // Total armed
		$('#padlock').addClass('total');
		$('#system_status').html(lang354);
	} else if (active_area > 0) {  // Partial inserted
		$('#padlock').addClass('partial');
		$('#system_status').html(lang355);
	} else {  // Disarmed
		$('#system_status').html(lang352);
	}
}

/**
 * Check if action request the forcing
 * 
 * @param cmd: The type of command
 * @param num: The number of area (max area as total)
 */
function checkVedoForcing(cmd, num) {
	if ((vedo_area_data.vedo_auth[1] == 0) || (tabella_pronta[cmd][num])) {
		sendVedoCommand(cmd, num);
	} else {
		exec_cmd = cmd;
		exec_num = num;
		$("#forced-area").dialog("open");
	}
}

/**
 * Send the command for vedo to bridge
 * 
 * @param cmd: The type of command
 * @param num: The number of area (max area as total)
 * @param force: if true send the forcing param
 */
function sendVedoCommand(type, area, force) {
	$.ajax({method: 'GET',
		url: location.protocol + "//" + bridgehost + '/user/action.cgi?' + (force == true ? 'force=1&' : '') + 'vedo=1&' + type + '=' + area,
		async: false,
		cache: false
	});
}

/********************************************************************
 Vedo zone status
 ********************************************************************/

var vedo_zone_data = {
	present: [],
	description: [],
	in_area: [],
	status: []
};

/**
 * Manage the zone status page update
 * 
 * @param {type} data: the json data.
 */
 var zone_stat_page = "#null";
function vedoZoneStatAuth(data) {
	var page_list = [
		{hash: 'open', title: lang82, bit_mask: 1, no_present: lang83},
		{hash: 'excluded', title: lang78, bit_mask: 128, no_present: lang79},
		{hash: 'isolated', title: lang80, bit_mask: 256, no_present: lang81},
		{hash: 'sabotated', title: lang84, bit_mask: 12, no_present: lang85},
		{hash: 'alarm', title: lang76, bit_mask: 2, no_present: lang335}
	];

	checkLogin('alm', data);

	if (logged) {
		if (isLogged('alm', data) == false) {
			logged = false;
			return false;
		}

		vedo_zone_data.status = data.status.split(',');

		var current = window.location.hash;
		var page = 0;
		for (page = 0; page < page_list.length; page++) {
			if (current == '#' + page_list[page].hash) {
				break;
			}
		}
		if (page == page_list.length) {
			window.location.hash = page_list[0].hash;
			page = 0;
			current = "#open";
		}
		
		if (current != zone_stat_page) {
			$.ajax({method: 'GET',
				url: location.protocol + '//' + bridgehost + '/user/action.cgi?refresh=' + zone_stat_page.substring(1,zone_stat_page.length),
				async: true,
				cache: false
			});
			zone_stat_page = current;
		}

		$('#menu_name').html(page_list[page].title);

		$('#menu_back').attr('href', '#' + page_list[page_list.length - 1].hash);
		$('#menu_next').attr('href', '#' + page_list[0].hash);
		if (page > 0) {
			$('#menu_back').attr('href', '#' + page_list[page - 1].hash);
		}
		if (page < (page_list.length - 1)) {
			$('#menu_next').attr('href', '#' + page_list[page + 1].hash);
		}
		$('#head_menu').css('display', '');

		var html = '<ul>';
		var present = 0;
		for (var i = 0; i < vedo_zone_data.present.length; i++) {
			if (vedo_zone_data.present[i] != '0') {
				if ((parseInt(vedo_zone_data.status[i], 16) & page_list[page].bit_mask) != 0) {
					html += '<li>' + vedo_zone_data.description[i] + '</li>';
					present++;
				}
			}
		}
		html += '</ul>'
		if (present == 0) {
			html = '<div class="no_list">' + page_list[page].no_present + '</div>';
		}
		$('#zone').html(html);
	} else {
		if (isLogged('alm', data)) {
			stopPoll();
			getVedoZoneData();
			logged = true;
			startPollFile('/user/vedo_zone_stat.json', vedoZoneStatAuth);
			return true;
		}
	}
	return false;
}


/**
 * Get the zone data for page
 */
function getVedoZoneData() {
	$.ajax({method: 'GET',
		url: location.protocol + '//' + bridgehost + '/user/vedo_zone_desc.json',
		dataType: 'json',
		async: false,
		cache: false
	}).done(function(data) {
		vedo_zone_data.present = data.present.split('');
		vedo_zone_data.description = data.description;
		vedo_zone_data.in_area = data.in_area;
	});
}

/********************************************************************
 Vedo zone page
 ********************************************************************/

/**
 * Manage the list of zone in area
 * 
 * @param {type} data: the data page
 */
function vedoZoneAuth(data) {
	checkLogin('alm', data);
	if (logged) {
		if (isLogged('alm', data) == false) {
			logged = false;
			return false;
		}
		vedo_zone_data.status = data.status.split(',');

		if (window.location.hash.split('_')[0] != '#area') {
			for (var i = 0; i < vedo_area_data.present.length; i++) {
				if (vedo_area_data.present[i] != 0) {
					window.location.hash = '#area_' + i;
					break;
				}
			}
		}
		var current = parseInt(window.location.hash.split('_')[1]);
		if ((vedo_area_data.present[current] == 0) || (current >= vedo_area_data.present.length)) {
			for (var i = 0; i < vedo_area_data.present.length; i++) {
				if (vedo_area_data.present[i] != 0) {
					window.location.hash = '#area_' + i;
					break;
				}
			}
		}

		$('#menu_name').html('');
		$('#menu_name').html(vedo_area_data.description[current]);

		for (var i = (vedo_area_data.present.length - 1); i >= current; i--) {
			if (vedo_area_data.present[i] != 0) {
				$('#menu_back').attr('href', '#area_' + i);
				break;
			}
		}
		for (var i = (current - 1); i >= 0; i--) {
			if (vedo_area_data.present[i] != 0) {
				$('#menu_back').attr('href', '#area_' + i);
				break;
			}
		}

		for (var i = 0; i <= current; i++) {
			if (vedo_area_data.present[i] != 0) {
				$('#menu_next').attr('href', '#area_' + i);
				break;
			}
		}
		for (var i = (current + 1); i < vedo_area_data.present.length; i++) {
			if (vedo_area_data.present[i] != 0) {
				$('#menu_next').attr('href', '#area_' + i);
				break;
			}
		}
		$('#head_menu').css('display', '');

		$('.zone_list').css('display', 'none');
		$('.area_' + current).css('display', '');

		for (var zone_num = 0; zone_num < vedo_zone_data.present.length; zone_num++) {
			var zone_status = parseInt(vedo_zone_data.status[zone_num], 16);

			if ($('#zone_list_' + zone_num)) {
				$('#zone_list_' + zone_num + ' .zone_status.state').removeClass('ok fault sabotage alarm');
				if ((zone_status & 2) != 0) {
					$('#zone_list_' + zone_num + ' .zone_status.state').addClass('alarm');
				} else if ((zone_status & 8) != 0) {
					$('#zone_list_' + zone_num + ' .zone_status.state').addClass('sabotage');
				} else if ((zone_status & 4) != 0) {
					$('#zone_list_' + zone_num + ' .zone_status.state').addClass('fault');
				} else if ((zone_status & 1) == 0) {
					$('#zone_list_' + zone_num + ' .zone_status.state').addClass('ok');
				}

				$('#zone_list_' + zone_num + ' .zone_status.open').css('visibility', 'hidden');
				if ((zone_status & 1) != 0) {
					$('#zone_list_' + zone_num + ' .zone_status.open').css('visibility', '');
				}

				$('#zone_list_' + zone_num + ' .zone_status.presence').removeClass('isolated excluded');
				if ((zone_status & 128) != 0) {
					$('#zone_list_' + zone_num + ' .zone_status.presence').addClass('excluded');
				} else if ((zone_status & 256) != 0) {
					$('#zone_list_' + zone_num + ' .zone_status.presence').addClass('isolated');
				}
			}
		}
	} else {
		if (isLogged('alm', data)) {
			stopPoll();
			createZoneList();
			logged = true;
			startPollFile('/user/vedo_zone_stat.json', vedoZoneAuth);
			return true;
		}
	}
	return false;
}

/**
 * create the zone data for page
 */
function createZoneList() {
	$.ajax({method: 'GET',
		url: location.protocol + '//' + bridgehost + '/user/vedo_area_desc.json',
		dataType: 'json',
		async: false,
		cache: false,
	}).done(function(data) {
		vedo_area_data.description = data.description;
		vedo_area_data.present = data.present;
		vedo_area_data.vedo_auth = data.vedo_auth;
		$.ajax({method: 'GET',
			url: location.protocol + '//' + bridgehost + '/user/vedo_zone_desc.json',
			dataType: 'json',
			async: false,
			cache: false,
		}).done(function(data) {
			vedo_zone_data.present = data.present.split('');
			vedo_zone_data.description = data.description;
			vedo_zone_data.in_area = data.in_area;

			html = "";
			for (var zone_num = 0; zone_num < vedo_zone_data.present.length; zone_num++) {
				if (vedo_zone_data.present[zone_num] != '0') {
					var area_class = '';
					for (var i = 0; i < num_aree; i++) {
						if ((vedo_zone_data.in_area[zone_num] & (1 << i)) != 0) {
							area_class += ' area_' + i;
						}
					}
					html += '<div class="zone_list' + area_class + '" id="zone_list_' + zone_num + '" style="display:none">\
							 <div class="icons zone_status state">&nbsp;</div>\
							 <div class="icons zone_status open">&nbsp;</div>\
							 <div class="icons zone_status presence">&nbsp;</div>\
							 <div class="zone_desc" id="zone_' + zone_num + '">' + vedo_zone_data.description[zone_num] + '</div>\
							 </div><div class=clear></div>';
				}
			}
			$('#zone').html(html);
			$('.zone_desc').click(function() {
				var zona = $(this).attr('id').split('_')[1];
				$('#zone_modify').dialog('option', 'title', vedo_zone_data.description[zona]);
				var buttons = {};
				var status = parseInt(vedo_zone_data.status[zona], 16);
				if ((status & 256) == 0) {
					buttons[lang74] = function() { // Isola
						sendVedoCommand('isol', parseInt(zona) + 1);
						$("#zone_modify").dialog("close");
					};
				} else {
					buttons[lang77] = function() { // Attiva
						sendVedoCommand('activ', parseInt(zona) + 1);
						$("#zone_modify").dialog("close");
					};
				}
				if ((status & 128) == 0) {
					buttons[lang28] = function() { //Escludi
						sendVedoCommand('excl', parseInt(zona) + 1);
						$("#zone_modify").dialog("close");
					};
				} else {
					buttons[lang29] = function() { // Includi
						sendVedoCommand('incl', parseInt(zona) + 1);
						$("#zone_modify").dialog("close");
					};
				}
				$('#zone_modify').dialog('option', 'buttons', buttons);
				$('#zone_modify').dialog('open');
			});
		});
	});
}

/*******************************************************************************
 ********************************************************************************
 Safe "serie S" Page
 *******************************************************************************/

/**
 * Manage the login and button in the safe home page
 * 
 * @param {type} data: the login data
 */
function safeIndexAuth(data) {
	checkLogin('old', data);
	if (logged) {
		if (isLogged('old', data) == false) {
			logged = false;
			return false;
		}
		//icona aree intrusione
		if ((data.areeT == '1') || (data.areeP1 == '1') || (data.areeP2 == '1')) {
			$('#safe_area').addClass('on');
		} else {
			$('#safe_area').removeClass('on');
		}
		//icona zone intrusione
		if (data.zone == '1') {
			$('#safe_zone').addClass('on');
		} else {
			$('#safe_zone').removeClass('on');
		}
	} else {
		if (isLogged('old', data) == true) {
			stopPoll();
			logged = true;
			startPollFile('/user/safe_index.json', safeIndexAuth);
			return true;
		}
	}
	return false;
}

/**
 * Create the Simple Safe serie S areas page
 */
function createAreas() {
	html = "";
	for (var area_num = 0; area_num < 8; area_num++) {
		html += '<div class="cell" id="row' + area_num + '">\
	<h2 id="desc_' + area_num + '" class="safe_area_desc"></h2>\
	<div>\
		<div class="col_sx">' + lang70 + '</div>\
		<div class="col_dx">' + lang65 + '<a href="#" onClick="clickArea(\'p1\',' + area_num + ');return false;" class="led_link button" id="link_p1_' + area_num + '"></a>' + lang66 + '<a href="#" onClick="clickArea(\'p2\',' + area_num + ');return false;" class="led_link button" id="link_p2_' + area_num + '"></a>' + lang68 + '<a href="#" onClick="clickArea(\'tot\',' + area_num + ');return false;" class="led_link button" id="link_to_' + area_num + '"></a></div>\
	</div>\
	<div class="clear"></div>\
	<div>\
		<div class="col_sx">' + lang76 + '</div>\
		<div class="col_dx">\
			<img class="led_img button" id="led_all_' + area_num + '" width="15px" height="15px" alt="off" src="/images/trans.png" />\
		</div>\
	</div>\
	<div class="clear"></div>\
	<div>\
		<div class="col_sx">' + lang73 + '</div>\
		<div class="col_dx">\
			<img class="led_img button" id="led_mem_' + area_num + '" width="15px" height="15px" alt="off" src="/images/trans.png" />\
		</div>\
	</div>\
</div><div class="clear"></div>';
	}
	$('#areas').html(html);
}

/**
 * Manage the login and the update of area
 * 
 * @param {type} data the json login/status data
 */
function safeAreaAuth(data) {
	checkLogin('old', data);
	if (logged) {
		if (isLogged('old', data) == false) {
			logged = false;
			return false;
		}
		updateSafeDescription(data);
		for (var area_num = 0; area_num < 9; area_num++) {
			if (data.statoArea[area_num] == 1) {
				$('#link_to_' + area_num).addClass('on');
			} else {
				$('#link_to_' + area_num).removeClass('on');
			}
			if (data.statoAreaP1[area_num] == 1) {
				$('#link_p1_' + area_num).addClass('on');
			} else {
				$('#link_p1_' + area_num).removeClass('on');
			}
			if (data.statoAreaP2[area_num] == 1) {
				$('#link_p2_' + area_num).addClass('on');
			} else {
				$('#link_p2_' + area_num).removeClass('on');
			}
			if (area_num < 8) {
				if (data.allarmeArea[area_num] == 1) {
					$('#led_all_' + area_num).addClass('on');
				} else {
					$('#led_all_' + area_num).removeClass('on');
				}
				if (data.memoriaArea[area_num] == 1) {
					$('#led_mem_' + area_num).addClass('on');
				} else {
					$('#led_mem_' + area_num).removeClass('on');
				}
			}
		}
	} else {
		if (isLogged('old', data) == true) {
			stopPoll();
			logged = true;
			startPollFile('/user/safe_area.json', safeAreaAuth);
			return true;
		}
	}
}


/**
 * Update the safe area description
 * 
 * @param {type} data: the login/info json data
 */
function updateSafeDescription(data) {
	var num_areas = 0;
	for (var area_num = 0; area_num < 8; area_num++) {
		if (data.old_auth.charAt(area_num + 1) != '0') {
			var area_desc = data.description[area_num];
			if (area_desc == '') {
				$('#row' + area_num).css('display', 'none');
				continue;
			}
			$('#row' + area_num).css('display', '');
			$('#desc_' + area_num).html(area_desc);
			num_areas++;
		} else {
			$('#row' + area_num).css('display', 'none');
		}
	}

	if (num_areas == 0) {
		$('#total').css('display', 'none');
	} else {
		$('#total').css('display', '');
	}
}

/********************************************************************
 Safe zone page auth/display
 ********************************************************************/
function safeZoneAuth(data) {
	checkLogin('old', data);
	if (logged) {
		if (isLogged('old', data) == false) {
			logged = false;
			return false;
		}
		var allarme_filo = false;
		var allarme_radio = false;
		var zone_filo = "";
		var zone_radio = "";
		for (var i = 0; i < 80; i++) {
			if (data.inF[i] == 1) {
				allarme_filo = true;
				zone_filo += '<br /> - Zona ' + (i + 1) + ': ';
				if (data.descF[i] != '') {
					zone_filo += data.descF[i];
				} else {
					zone_filo += '-';
				}
			}
			if ((data.inR[i] == 1) && (i < 48)) {
				allarme_radio = true;
				zone_radio += "<br /> - Zona " + (i + 1) + ": ";
				if (data.descR[i] != '') {
					zone_radio += data.descR[i];
				} else {
					zone_radio += '-';
				}
			}
		}

		if (allarme_filo) {
			$('#txt1F').css('font-weight', 'bold');
			$('#txt1F').css('color', '#F00');
			$('#txt1F').html(lang289); // ATTENZIONE, sono aperte le seguenti zone:
			$('#txt2F').html(zone_filo);
		} else {
			$('#txt1F').css('font-weight', 'normal');
			$('#txt1F').css('color', '#000');
			$('#txt1F').html(lang83); // Nessuna Zona aperta
			$('#txt2F').html('');
		}
		if (allarme_radio) {
			$('#txt1R').css('font-weight', 'bold');
			$('#txt1R').css('color', '#F00');
			$('#txt1R').html(lang289); // ATTENZIONE, sono aperte le seguenti zone:
			$('#txt2R').html(zone_radio);
		} else {
			$('#txt1R').css('font-weight', 'normal');
			$('#txt1R').css('color', '#000');
			$('#txt1R').html(lang83); // Nessuna Zona aperta
			$('#txt2R').html('');
		}
	} else {
		if (isLogged('old', data) == true) {
			stopPoll();
			logged = true;
			startPollFile('/user/safe_zone.json', safeZoneAuth);
			return true;
		}
	}
	return false;
}


/*******************************************************************************
 ********************************************************************************
 Utility
 *******************************************************************************/

/**
 * Function to get the param passed to the page.
 *
 * @return The array with all param passed to the page in GET
 */
function getParams() {
	var qsParm = new Array();
	var query = window.location.search.substring(1);
	var parms = query.split('&');
	for (var i = 0; i < parms.length; i++) {
		var pos = parms[i].indexOf('=');
		if (pos > 0) {
			var key = parms[i].substring(0, pos);
			var val = parms[i].substring(pos + 1);
			qsParm[key] = val;
		}
	}
	return qsParm;
}

/**
 * Function for update the slider color in the RGB page
 *
 * @param color Pointer to the jscolor picker object
 * @param num The number of rgb icon
 */
function updateRGBSlider(color, num) {
	var h = color.hsv[0];
	var s = color.hsv[1]
	var v = 1;
	if (h == null) {
		return [v, v, v];
	}
	var i = Math.floor(h);
	var f = i % 2 ? h - i : 1 - (h - i);
	var m = v * (1 - s);
	var n = v * (1 - s * f);
	var rgb = [];
	switch (i) {
		case 6:
		case 0:
			rgb = [v, n, m];
			break;
		case 1:
			rgb = [n, v, m];
			break;
		case 2:
			rgb = [m, v, n];
			break;
		case 3:
			rgb = [m, n, v];
			break;
		case 4:
			rgb = [n, m, v];
			break;
		case 5:
			rgb = [v, m, n];
			break;
	}
	background = 'rgb(' + (rgb[0] * 100) + '%,' + (rgb[1] * 100) + '%,' + (rgb[2] * 100) + '%)';
	$('#rgb_value_' + num).find('.ui-slider-handle').css('background', background);
	$('#rgb_value_' + num).slider('option', 'value', color.hsv[2] * 1000);
	if ($('#rgb_input_' + num)) {
		$('#rgb_input_' + num).css('background', background);
		$('#rgb_input_' + num).css('color', background);
	}
	if ($('#rgb_color_' + num)) {
		$('#rgb_color_' + num).css('background', background);
	}
}


/**
 * Add leading zero to number string
 * @param {type} s the number
 * @returns {String}
 */
function z(s) {
	s = '' + s;
	return s.length > 1 ? s : '0' + s;
}

/**
 * Limit the number after decimal point to "limit"
 * 
 * @param {type} number
 * @param {type} limit
 * @returns {unresolved}
 */
function decimal_limit(number, limit) {
	number = number.toString();
	var comma = number.indexOf('.');
	if (comma != -1) {
		number = number.substring(0, (comma + 1 + limit));
	}
	return number;
}


/* Copyright (c) 2011 Cloudgen Wong (<a href="http://www.cloudgen.w0ng.hk">Cloudgen Wong</a>) Licensed under the MIT License: http://www.opensource.org/licenses/mit-license.php */ var email = {tldn: new RegExp("^[^@]+@[^@]+.(A[C-GL-OQ-UWXZ]|B[ABD-JM-OR-TVWYZ]|C[ACDF-IK-ORUVX-Z]|D[EJKMOZ]|E[CEGR-U]|F[I-KMOR]|G[ABD-IL-NP-UWY]|H[KMNRTU]|I[DEL-OQ-T]|J[EMOP]|K[EG-IMNPRWYZ]|L[A-CIKR-VY]|M[AC-EGHK-Z]|N[ACE-GILOPRUZ]|OM|P[AE-HKL-NR-TWY]|QA|R[EOSUW]|S[A-EG-ORT-VYZ]|T[CDF-HJ-PRTVWZ]|U[AGKMSYZ]|V[ACEGINU]|W[FS]|XN|Y[ETU]|Z[AMW]|AERO|ARPA|ASIA|BIZ|CAT|COM|COOP|EDU|GOV|INFO|INT|JOBS|MIL|MOBI|MUSEUM|NAME|NET|ORG|PRO|TEL|TRAVEL)$", "i")};
(function() {
	$.extend($.expr[":"], {regex: function(e, t, n) {
			var r = new RegExp(n[3], "g");
			var i = "text" == e.type ? e.value : e.innerHTML;
			return i == "" ? true : r.exec(i)
		}});
	$.fn.output = function(e) {
		if (typeof e == "undefined")
			return this.is(":text") ? this.val() : this.html();
		else
			return this.is(":text") ? this.val(e) : this.html(e)
	};
	formatter = {getRegex: function(e) {
			var e = $.extend({type: "decimal", precision: 5, decimal: ".", allow_negative: true}, e);
			var t = "";
			if (e.type == "decimal") {
				var n = e.allow_negative ? "-?" : "";
				if (e.precision > 0)
					t = "^" + n + "\\d+$|^" + n + "\\d*" + e.decimal + "\\d{1," + e.precision + "}$";
				else
					t = "^" + n + "\\d+$"
			} else if (e.type == "phone-number") {
				t = "^\\d[\\d\\-]*\\d$"
			} else if (e.type == "alphabet") {
				t = "^[A-Za-z]+$"
			}
			return t
		}, isEmail: function(e) {
			var t = $(e).output();
			var n = false;
			var r = true;
			var r = new RegExp("[s~!#$%^&*+=()[]{}<>\\/;:,?|]+");
			if (t.match(r) != null) {
				return n
			}
			if (t.match(/((\.\.)|(\.\-)|(\.\@)|(\-\.)|(\-\-)|(\-\@)|(\@\.)|(\@\-)|(\@\@))+/) != null) {
				return n
			}
			if (t.indexOf("'") != -1) {
				return n
			}
			if (t.indexOf('"') != -1) {
				return n
			}
			if (email.tldn && t.match(email.tldn) == null) {
				return n
			}
			return r
		}, formatString: function(e, t) {
			var t = $.extend({type: "decimal", precision: 5, decimal: ".", allow_negative: true}, t);
			var n = $(e).output();
			var r = n;
			if (t.type == "decimal") {
				if (r != "") {
					var i;
					var s = t.allow_negative ? "\\-" : "";
					var o = "\\" + t.decimal;
					i = new RegExp("[^\\d" + s + o + "]+", "g");
					r = r.replace(i, "");
					var s = t.allow_negative ? "\\-?" : "";
					if (t.precision > 0)
						i = new RegExp("^(" + s + "\\d*" + o + "\\d{1," + t.precision + "}).*");
					else
						i = new RegExp("^(" + s + "\\d+).*");
					r = r.replace(i, "$1")
				}
			} else if (t.type == "phone-number") {
				r = r.replace(/[^\-\d]+/g, "").replace(/^\-+/, "").replace(/\-+/, "-")
			} else if (t.type == "alphabet") {
				r = r.replace(/[^A-Za-z]+/g, "")
			}
			if (r != n)
				$(e).output(r)
		}};
	$.fn.format = function(e, t) {
		var e = $.extend({type: "decimal", precision: 5, decimal: ".", allow_negative: true, autofix: false}, e);
		var n = e.decimal;
		t = typeof t == "function" ? t : function() {
		};
		this.keypress(function(t) {
			$(this).data("old-value", $(this).val());
			if ($(this).attr('precision') != undefined) {
				e.precision = parseInt($(this).attr('precision'));
			}
			var r = t.charCode ? t.charCode : t.keyCode ? t.keyCode : 0;
			if (r == 13 && this.nodeName.toLowerCase() != "input") {
				return false
			}
			if (t.ctrlKey && (r == 97 || r == 65 || r == 120 || r == 88 || r == 99 || r == 67 || r == 122 || r == 90 || r == 118 || r == 86 || r == 45) || r == 46 && t.which != null && t.which == 0)
				return true;
			if (r < 48 || r > 57) {
				if (e.type == "decimal") {
					if (e.allow_negative && r == 45 && this.value.length == 0)
						return true;
					if (r == n.charCodeAt(0)) {
						if (e.precision > 0 && this.value.indexOf(n) == -1)
							return true;
						else
							return false
					}
					if (r != 8 && r != 9 && r != 13 && r != 35 && r != 36 && r != 37 && r != 39) {
						return false
					}
					return true
				} else if (e.type == "email") {
					if (r == 8 || r == 9 || r == 13 || r > 34 && r < 38 || r == 39 || r == 45 || r == 46 || r > 64 && r < 91 || r > 96 && r < 123 || r == 95) {
						return true
					}
					if (r == 64 && this.value.indexOf("@") == -1)
						return true;
					return false
				} else if (e.type == "phone-number") {
					if (r == 45 && this.value.length == 0)
						return false;
					if (r == 8 || r == 9 || r == 13 || r > 34 && r < 38 || r == 39 || r == 45) {
						return true
					}
					return false
				} else if (e.type == "alphabet") {
					if (r == 8 || r == 9 || r == 13 || r > 34 && r < 38 || r == 39 || r > 64 && r < 91 || r > 96 && r < 123)
						return true
				} else
					return false
			} else {
				if (e.type == "alphabet") {
					return false
				} else
					return true
			}
		}).blur(function() {
			if (e.type == "email") {
				if (!formatter.isEmail(this)) {
					t.apply(this)
				}
			} else {
				if (!$(this).is(":regex(" + formatter.getRegex(e) + ")")) {
					t.apply(this)
				}
			}
		}).focus(function() {
			$(this).select()
		});
		if (e.autofix) {
			this.keyup(function(t) {
				if ($(this).data("old-value") != $(this).val())
					formatter.formatString(this, e)
			})
		}
		return this
	}
})(jQuery);


/* Copyright 2012-2013 Daniel Tillin full license details at http://code.google.com/p/csv-to-array/#License */
String.prototype.csvToArray = function(e) {
	var t = {fSep: ",", rSep: "\r\n", quot: '"', head: false, trim: false};
	if (e) {
		for (var n in t) {
			if (!e[n])
				e[n] = t[n]
		}
	} else {
		e = t
	}
	var r = [[""]];
	for (var i = f = p = q = 0; p < this.length; p++) {
		switch (c = this.charAt(p)) {
			case e.quot:
				if (q && this.charAt(p + 1) == e.quot) {
					r[i][f] += e.quot;
					++p
				} else {
					q ^= 1
				}
				break;
			case e.fSep:
				if (!q) {
					if (e.trim) {
						r[i][f] = r[i][f].replace(/^\s\s*/, "").replace(/\s\s*$/, "")
					}
					r[i][++f] = ""
				} else {
					r[i][f] += c
				}
				break;
			case e.rSep.charAt(0):
				if (!q && (!e.rSep.charAt(1) || e.rSep.charAt(1) && e.rSep.charAt(1) == this.charAt(p + 1))) {
					if (e.trim) {
						r[i][f] = r[i][f].replace(/^\s\s*/, "").replace(/\s\s*$/, "")
					}
					r[++i] = [""];
					r[i][f = 0] = "";
					if (e.rSep.charAt(1)) {
						++p
					}
				} else {
					r[i][f] += c
				}
				break;
			default:
				r[i][f] += c
		}
	}
	if (e.head) {
		r.shift()
	}
	if (r[r.length - 1].length < r[0].length) {
		r.pop()
	}
	return r
}






































































































































































































































function rules_vis_onload() {
	if (alarm_type != '2') {
		//not VEDO
		$('.vedo_io').remove();
		$('.vedo_act').remove();
	}
	if (alarm_type != '1') {
		//not SAFE
		$('.safe_io').remove();
		$('.safe_act').remove();
	}
	for (var i = 0; i < rule_desc.length; i++) {
		$('[name=num] option:eq(' + i + ')').html((i + 1) + ' - ' + rule_desc[i]);
	}
}
function scenario_vis_onload() {
	if (alarm_type != '2') {
		//not VEDO
		$('.vedo_io').remove();
		$('.vedo_act').remove();
	}
	if (alarm_type != '1') {
		//not SAFE
		$('.safe_io').remove();
		$('.safe_act').remove();
	}
	for (var i = 0; i < scenario_desc.length; i++) {
		$('[name=num] option:eq(' + i + ')').html((i + 1) + ' - ' + scenario_desc[i]);
	}
}
function timer_vis_onload() {
	if (alarm_type != '2') {
		//not VEDO
		$('.vedo_io').remove();
		$('.vedo_act').remove();
	}
	if (alarm_type != '1') {
		//not SAFE
		$('.safe_io').remove();
		$('.safe_act').remove();
	}
	for (var i = 0; i < timer_desc.length; i++) {
		$('[name=num] option:eq(' + i + ')').html((i + 1) + ' - ' + timer_desc[i]);
	}
}
function rules_validate() {
	for (var i = 0; i < 2; i++) {
		//forece END before an OFF
		if ($('[name=type' + (i + 1) + ']').val() == '0') {
			$('[name=rel' + i + ']').val('0');
		}
	}
}
function rules_vis_update() {
	for (var i = 0; i < 3; i++) {
		var type = $('[name=type' + i + ']').val();
		switch (type) {
			case '0':	//OFF
				if (i < 2) {
					//force END and OFF in next element
					$('[name=rel' + i + ']').val('0');
					$('[name=type' + (i + 1) + ']').val('0');
				}
				break;
			case '1':	//ICON
				$('#vis_sub_icon' + i).css('display', '');
				var type_sel = $('[name=icon_type' + i + ']').val();
				if ((type_sel === "2") || (type_sel === "5")) {
					$('#vis_stat_aut' + i).css('display', '');
				} else {
					$('#vis_status' + i).css('display', '');
				}
				if (type_sel != rule_icon_type[i]) {
					var string = [];
					var optg_icon_cont = [];
					$('[name=icon_number' + i + ']').html('');
					for (var j = 0; j < icon_env_desc.length; j++) {
						string[j] = '<optgroup label="' + icon_env_desc[j] + '">';
						optg_icon_cont[j] = 0;
					}
					for (var j = 0; j < icon_desc.length; j++) {
						if (icon_type[j] == type_sel) {
							string[icon_env[j]] += '<option value=' + j + '>' + icon_desc[j] + '</option>';
							optg_icon_cont[icon_env[j]]++;
						}
					}
					for (var j = 0; j < icon_env_desc.length; j++) {
						if (optg_icon_cont[j]) {
							$('[name=icon_number' + i + ']').append(string[j] + '</optgroup>');
						}
					}
					rule_icon_type[i] = type_sel;
				}
				break;
			case '2':	//SCENARIO
				$('#vis_status' + i).css('display', '');
				$('#vis_sub_list' + i).css('display', '');
				var string = '';
				if (type != rule_type[i]) {
					for (var j = 0; j < scenario_desc.length; j++) {
						string += '<option value=' + j + '>' + (j + 1) + ' - ' + scenario_desc[j] + '</option>';
					}
					$('[name=sub_list' + i + ']').html(string);
					rule_type[i] = type;
				}
				break;
			case '3':	//SH_IN
				$('#io_module_type' + i).html(lang262);
				$('#vis_status' + i).css('display', '');
				$('#vis_sub_sh' + i).css('display', '');
				break;
			case '4':	//SH_OUT
				$('#io_module_type' + i).html(lang357);
				$('#vis_status' + i).css('display', '');
				$('#vis_sub_sh' + i).css('display', '');
				break;
			case '5': //TIMER
				$('#vis_status' + i).css('display', '');
				$('#vis_sub_list' + i).css('display', '');
				if (type != rule_type[i]) {
					var string = '';
					for (var j = 0; j < timer_desc.length; j++) {
						string += '<option value=' + j + '>' + (j + 1) + ' - ' + timer_desc[j] + '</option>';
					}
					$('[name=sub_list' + i + ']').html(string);
					rule_type[i] = type;
				}
				break;
			case '6': //RULES
				$('#vis_status' + i).css('display', '');
				$('#vis_sub_list' + i).css('display', '');
				if (type != rule_type[i]) {
					var string = '';
					for (var j = 0; j < rule_desc.length; j++) {
						string += '<option value=' + j + '>' + (j + 1) + ' - ' + rule_desc[j] + '</option>';
					}
					$('[name=sub_list' + i + ']').html(string);
					rule_type[i] = type;
				}
				break;
			case '7': //SUN
				$('#vis_stat_sun' + i).css('display', '');
				break;
			case '8': //SH_ALL_IN
			case '9': //SH_ALL_OUT
				$('#vis_status' + i).css('display', '');
				$('#vis_sub_sh' + i).css('display', '');
				break;

			case '20': //SAFE_FILO
				$('#vis_stat_zone' + i).css('display', '');
				$('#vis_sub_list' + i).css('display', '');
				if (type != rule_type[i]) {
					var string = '';
					for (var j = 0; j < safe_wired_desc.length; j++) {
						string += '<option value=' + j + '>' + (j + 1) + ' - ' + safe_wired_desc[j] + '</option>';
					}
					$('[name=sub_list' + i + ']').html(string);
					rule_type[i] = type;
				}
				break;
			case '21': //SAFE_RADIO
				$('#vis_stat_zone' + i).css('display', '');
				$('#vis_sub_list' + i).css('display', '');
				if (type != rule_type[i]) {
					var string = '';
					for (var j = 0; j < safe_radio_desc.length; j++) {
						string += '<option value=' + j + '>' + (j + 1) + ' - ' + safe_radio_desc[j] + '</option>';
					}
					$('[name=sub_list' + i + ']').html(string);
					rule_type[i] = type;
				}
				break;
			case '22': //SAFE_AREA_DIS
			case '23': //SAFE_AREA_ARM
			case '24': //SAFE_ALARM
			case '25': //SAFE_AREA_OUT
				$('#vis_status' + i).css('display', '');
				$('#vis_sub_list' + i).css('display', '');
				if (type != rule_type[i]) {
					var string = '';
					for (var j = 0; j < safe_area_desc.length; j++) {
						string += '<option value=' + j + '>' + safe_area_desc[j] + '</option>';
					}
					$('[name=sub_list' + i + ']').html(string);
					rule_type[i] = type;
				}
				break;
			case '30': //VEDO_IN
				$('#vis_stat_zone' + i).css('display', '');
				$('#vis_sub_list' + i).css('display', '');
				if (type != rule_type[i]) {
					var string = '';
					for (var j = 0; j < vedo_zone_desc.length; j++) {
						if (vedo_zone_bridge[j] == '1') {
							string += '<option value=' + j + '>' + vedo_zone_desc[j] + '</option>';
						}
					}
					$('[name=sub_list' + i + ']').html(string);
					rule_type[i] = type;
				}
				break;
			case '31': //VEDO_AREA_DIS
			case '32': //VEDO_AREA_ARM
			case '33': //VEDO_AREA_ALARM
			case '34': //AREA_DELAY_IN
			case '35': //AREA_DELAY_OUT
				$('#vis_status' + i).css('display', '');
				$('#vis_sub_list' + i).css('display', '');
				if (type != rule_type[i]) {
					var string = '';
					for (var j = 0; j < vedo_area_desc.length; j++) {
						if (vedo_area_bridge[j] == '1') {
							string += '<option value=' + j + '>' + vedo_area_desc[j] + '</option>';
						}
					}
					string += '<option value=254>' + lang384 + '</option>';
					string += '<option value=255>' + lang222 + '</option>';
					$('[name=sub_list' + i + ']').html(string);
					rule_type[i] = type;
				}
				break;
		}
		if (i < 2) {
			if ($('[name=rel' + i + ']').val() != '0') {
				$('#vis_element' + (i + 1)).css('display', '');
			} else {
				$('[name=rel' + (i + 1) + ']').val('0');
			}
		}
		if ((($('[name=rel' + i + ']').val() == '0') || (i < 2)) && (type != '0')) {
			$('#vis_dest_true').css('display', '');
			$('#vis_dest_false').css('display', '');
		}
	}
}
function action_vis_update(id) {
	var icon_id = 0;
	for (var i = 0; i < id.length; i++) {
		$('#subact_sh' + id[i] + ' option').prop('disabled', true);
		$('#subact_sh' + id[i] + ' option').css('display', '');
		$('[name=subact_therm' + id[i] + '] option').css('display','');
		var type = $('[name=act' + id[i] + ']').val();
		switch (type) {
			case '0':	//OFF
				break;

			case '1':	//ICONA
				$('#vis_subact_icon' + id[i]).css('display', '');
				$('[name=subact_icon_type_t] option[value=4]').css('display', '');
				$('#subact_icon_value' + id[i] + ' option[value=3]').css('display','none');
				$('#subact_icon_value' + id[i] + ' option[value=4]').css('display','none');
				$('#temp_desc' + id[i]).css('display', 'none');
				var type_sel = $('[name=subact_icon_type' + id[i] + ']').val();
				if (type_sel != act_data_type[i]) {
					var string = [];
					var optg_icon_cont = [];
					$('[name=subact_icon_num' + id[i] + ']').html('');
					for (var j = 0; j < icon_env_desc.length; j++) {
						string[j] = '<optgroup label="' + icon_env_desc[j] + '">';
						optg_icon_cont[j] = 0;
					}
					for (var j = 0; j < icon_desc.length; j++) {
						if (icon_type[j] == type_sel) {
							string[icon_env[j]] += '<option value=' + icon_id + '>' + icon_desc[j] + '</option>';
							optg_icon_cont[icon_env[j]]++;
							icon_id++;
						}
					}
					for (var j = 0; j < icon_env_desc.length; j++) {
						if (optg_icon_cont[j]) {
							$('[name=subact_icon_num' + id[i] + ']').append(string[j] + '</optgroup>');
						}
					}
					act_data_type[i] = type_sel;
				}
				var start_icon = 0;
				for (start_icon = 0; start_icon < icon_type.length; start_icon++) {
					if (icon_type[start_icon] == type_sel) {
						break;
					}
				}
				switch (icon_io_type[start_icon + parseInt($('[name=subact_icon_num' + id[i] + ']').val(), 10) ]) {
					case '0':	//norm
					case '1':	//temp
						$('#vis_subact_icon_norm' + id[i]).css('display', '');
						break;
					case '2':	//dimmer
						$('#vis_subact_icon_value' + id[i]).css('display', '');
						if ($('#subact_icon_value' + id[i]).val() == '2') {
							$('#vis_subact_dimmer' + id[i]).css('display', '');
						}
						break;
					case '10':	//New dimmer
						$('#vis_subact_icon_value' + id[i]).css('display', '');
						$('#subact_icon_value' + id[i] + ' option[value=3]').css('display','');
						$('#subact_icon_value' + id[i] + ' option[value=4]').css('display','');
						if ($('#subact_icon_value' + id[i]).val() == '2') {
							$('#vis_subact_dimmer' + id[i]).css('display', '');
						}
						break;
					case '3':	//RGB
						$('#vis_subact_icon_value' + id[i]).css('display', '');
						if ($('#subact_icon_value' + id[i]).val() == '2') {
							$('#vis_subact_rgb' + id[i]).css('display', '');
						}
						break;
					case '4':	//autom
						$('#vis_subact_icon_aut' + id[i]).css('display', '');
						break;
					case '6':	//Thermo and RJ45 etc
					case '8':	//Eyeon only: T4
					case '9':	//Eyeon only: T2
					case '12':	// New Thermo
						$('[name=subact_temp' + id[i] + ']').attr('precision', '1');
						$('#temp_desc' + id[i]).css('display', '');
						$('#vis_subact_therm' + id[i]).css('display', '');
						var thermo_sel = $('[name=subact_therm' + id[i] + ']').val();
						if ((thermo_sel == '1') || (thermo_sel == '6')) {
							$('#vis_subact_therm_temp' + id[i]).css('display', '');
						}
						$('[name=subact_therm' + id[i] + '] option.humi').css('display','none');
						$('#vis_subact_therm_temp' + id[i] + ' .clima_label').html('&deg;C');
						break;
					case '11': //Humi
						$('[name=subact_temp' + id[i] + ']').attr('precision', '0');
						$('#vis_subact_therm' + id[i]).css('display', '');
						var thermo_sel = $('[name=subact_therm' + id[i] + ']').val();
						if ((thermo_sel == '11') || (thermo_sel == '16')) {
							$('#vis_subact_therm_temp' + id[i]).css('display', '');
						}
						$('[name=subact_therm' + id[i] + '] option.thermo').css('display','none');
						$('#vis_subact_therm_temp' + id[i] + ' .clima_label').html('%');
						break;
					case '13': //thermo-humi
					case '14': //humi-thermo
						var thermo_sel = $('[name=subact_therm' + id[i] + ']').val();
						if (thermo_sel >= 10) {
							$('[name=subact_temp' + id[i] + ']').attr('precision', '0');
							$('#vis_subact_therm_temp' + id[i] + ' .clima_label').html('%');
						} else {
							$('[name=subact_temp' + id[i] + ']').attr('precision', '1');
							$('#vis_subact_therm_temp' + id[i] + ' .clima_label').html('&deg;C');
							$('#temp_desc' + id[i]).css('display', '');
						}
						$('#vis_subact_therm' + id[i]).css('display', '');
						if ((thermo_sel == '1') || (thermo_sel == '6') || 
							(thermo_sel == '11') || (thermo_sel == '16')) {
							$('#vis_subact_therm_temp' + id[i]).css('display', '');
						}
						break;
					case '5':	//2I in BCD mode
					case '7':	//old unused type
						$('[name=subact_temp' + id[i] + ']').attr('precision', '0');
						var value = parseFloat($('[name=subact_temp' + id[i] + ']').val());
						if ((value % 1) != 0) {
							$('[name=subact_temp' + id[i] + ']').val(Math.floor(value));
						}
						$('#vis_subact_therm' + id[i]).css('display', '');
						$('[name=subact_therm' + id[i] + '] option.humi').css('display','none');
						var thermo_sel = $('[name=subact_therm' + id[i] + ']').val();
						if ((thermo_sel == '1') || (thermo_sel == '6')) {
							$('#vis_subact_therm_temp' + id[i]).css('display', '');
						}
						break;
				}
				break;
			case '2':	//SUPERVISOR
				$('#vis_subact_list' + id[i]).css('display', '');
				$('#vis_subact_onoff' + id[i]).css('display', '');
				if (type != act[i]) {
					var string = '';
					for (var j = 0; j < 8; j++) {
						string += '<option value=' + j + '>' + (j + 1) + '</option>';
					}
					$('[name=subact_list' + id[i] + ']').html(string);
					act[i] = type;
					$('[name=sact_onoff' + id[i] + ']').val(2);
				}
				break;
			case '3':	//SCENARIO
				$('#vis_subact_list' + id[i]).css('display', '');
				if (type != act[i]) {
					var string = '';
					for (var j = 0; j < scenario_desc.length; j++) {
						string += '<option value=' + j + '>' + (j + 1) + ' - ' + scenario_desc[j] + '</option>';
					}
					$('[name=subact_list' + id[i] + ']').html(string);
					act[i] = type;
				}
				break;
			case '4':	//SH OUT
				$('#vis_subact_mod_usc' + id[i]).css('display', '');
				$('#vis_subact_sh' + id[i]).css('display', '');
				$('#subact_sh' + id[i] + ' option').prop('disabled', false);
				switch ($('#subact_sh' + id[i]).val()) {
					case '4':	//DIMMER
						$('#vis_subact_dimmer' + id[i]).css('display', '');
						break;
					case '5':	//RGB
						$('#vis_subact_rgb' + id[i]).css('display', '');
						break;
				}
				break;
			case '5':	//SH ZONE
				$('#vis_subact_zone' + id[i]).css('display', '');
				$('#vis_subact_sh' + id[i]).css('display', '');
				$('#subact_sh' + id[i] + ' option:lt(5)').prop('disabled', false);
				$('#subact_sh' + id[i] + ' option:gt(4)').css('display', 'none');
				switch ($('#subact_sh' + id[i]).val()) {
					case '4':	//DIMMER
						$('#vis_subact_dimmer' + id[i]).css('display', '');
						break;
					case '5':	//RGB
						$('#vis_subact_rgb' + id[i]).css('display', '');
						break;
				}
				break;
			case '6':	//SAFE
				$('#vis_subact_alm_safe' + id[i]).css('display', '');
				$('#vis_subact_list' + id[i]).css('display', '');
				if (type != act[i]) {
					var string = '<option value=8>' + lang222 + '</option>';
					for (var j = 0; j < safe_area_desc.length; j++) {
						string += '<option value=' + j + '>' + safe_area_desc[j] + '</option>';
					}
					$('[name=subact_list' + id[i] + ']').html(string);
					act[i] = type;
				}
				break;
			case '7':	//VEDO
				$('#vis_subact_alm_vedo' + id[i]).css('display', '');
				$('#vis_subact_list' + id[i]).css('display', '');
				if (type != act[i]) {
					var num_aree = 0;
					var string = '';
					for (var j = 0; j < vedo_area_desc.length; j++) {
						if (vedo_area_bridge[j] == '1') {
							string += '<option value=' + j + '>' + vedo_area_desc[j] + '</option>';
							num_aree++;
						}
					}
					if (num_aree > 1) {
						string = '<option value=' + vedo_area_desc.length + '>' + lang222 + '</option>' + string;
					}
					$('[name=subact_list' + id[i] + ']').html(string);
					act[i] = type;
				}
				break;
			case '8':	//SHOME ENVIRONMENT
				$('#vis_subact_env' + id[i]).css('display', '');
				var type_sel = $('[name=subact_env_type' + id[i] + ']').val();
				if (type_sel != act_data_type[i]) {
					var string = "";
					$('[name=subact_env_num' + id[i] + ']').html('');
					var present = [];
					for (var j = 1; j < icon_env_desc.length; j++) {
						present[j] = false;
					}
					for (var j = 1; j < icon_type.length; j++) {
						if (icon_type[j] == type_sel) {
							present[icon_env[j]] = true;
						}
					}
					for (var j = 1; j < icon_env_desc.length; j++) {
						if ((icon_env_desc[j] != "") && (present[j] == true)) {
							string += '<option value=' + j + '>' + icon_env_desc[j] + '</option>';
						}
					}
					$('[name=subact_env_num' + id[i] + ']').html(string);
					act_data_type[i] = type_sel;
				}
				switch ($('[name=subact_env_type' + id[i] + ']').val()) {
					case '5':	//autom
						$('#vis_subact_icon_aut' + id[i]).css('display', '');
						break;
					default:	//temp
						$('#vis_subact_icon_norm' + id[i]).css('display', '');
						break;
				}
				break;
			case '9':
				$('#vis_act_delay' + id[i]).css('display', '');
				break;
		}
	}
}
function validateAction(id) {
	for (var i = 0; i < id.length; i++) {
		var type = $('[name=act' + id[i] + ']').val();
		switch (type) {
			case '1':	//ICONA
				var type_sel = $('[name=subact_icon_type' + id[i] + ']').val();
				var start_icon = 0;
				for (start_icon = 0; start_icon < icon_type.length; start_icon++) {
					if (icon_type[start_icon] == type_sel) {
						break;
					}
				}
				switch (icon_io_type[ start_icon + parseInt($('[name=subact_icon_num' + id[i] + ']').val(), 10) ]) {
					case '6':	//Thermo and RJ45 etc
					case '8':	//Eyeon only: T4
					case '9':	//Eyeon only: T2
					case '12':  //New thermo
						var thermo_sel = $('[name=subact_therm' + id[i] + ']').val();
						if ((thermo_sel == '1') || (thermo_sel == '6')) {
							var value = parseFloat($('[name=subact_temp' + id[i] + ']').val());
							if (isNaN(value)) {
								value = 5;
							}
							if (value < 5) {
								value = 5;
							} else if (value > 30) {
								value = 30;
							}
							$('[name=subact_temp' + id[i] + ']').val(value);
						}
						break;
					case '5':	//2I in BCD mode
					case '7':	//old unused type
						var thermo_sel = $('[name=subact_therm' + id[i] + ']').val();
						if ((thermo_sel == '1') || (thermo_sel == '6')) {
							var value = parseFloat($('[name=subact_temp' + id[i] + ']').val());
							if (isNaN(value)) {
								value = 5;
							}
							if (value < 5) {
								value = 5;
							} else if (value > 43) {
								value = 43;
							}
							$('[name=subact_temp' + id[i] + ']').val(value);
						}
						break;
					case '11':	// humi
					case '13':	// thermo_humi
					case '14':	// humi_thermo
						var thermo_sel = $('[name=subact_therm' + id[i] + ']').val();
						if (parseInt(thermo_sel) <= '9')
						{
							if ((thermo_sel == '1') || (thermo_sel == '6')) {
								var value = parseFloat($('[name=subact_temp' + id[i] + ']').val());
								if (isNaN(value)) {
									value = 5;
								}
								if (value < 5) {
									value = 5;
								} else if (value > 30) {
									value = 30;
								}
								$('[name=subact_temp' + id[i] + ']').val(value);
							}
						}
						else
						{
							var value = parseFloat($('[name=subact_temp' + id[i] + ']').val());
							if (isNaN(value)) {
								value = 0;
							}
							if (value < 0) {
								value = 0;
							} else if (value > 100) {
								value = 100;
							}
							$('[name=subact_temp' + id[i] + ']').val(value);
						}
						break;
					default:
						break;
				}
				break;
				
			case '9':
				var minute = parseInt($('[name=delay_minute' + id[i] + ']').val()) || 0;
				if (minute < 0) {
					minute = 0;
				}
				if (minute > 59) {
					minute = 59;
				}
				$('[name=delay_minute' + id[i] + ']').val(minute);
				
				var second = parseInt($('[name=delay_second' + id[i] + ']').val()) || 0;
				if (second < 0) {
					second = 0;
				}
				if (second > 59) {
					second = 59;
				}
				
				$('[name=delay_second' + id[i] + ']').val(second);
				break;

			default:
				break;
		}
	}
}
//function vedoAreaAuth(data) {
//	checkLogin('alm', data);
//	if (logged) {
//		if(isLogged('alm', data) == false) {
//			logged = false;
//			return false;
//		}
//		authentication = data.find('vedo_auth').text();
//		tabella_pronta['p1'][num_aree] = true;
//		tabella_pronta['p2'][num_aree] = true;
//		tabella_pronta['p12'][num_aree] = true;
//		tabella_pronta['tot'][num_aree] = true;
//		for (i = 0; i < num_aree; i++) {
//			inserita = data.find('inserita').text().charAt(i);
//			pronta = data.find('pronta').text().charAt(i);
//			allarme = data.find('allarme').text().charAt(i);
//			anomalia = data.find('anomalia').text().charAt(i);
//			sabot = data.find('sabot').text().charAt(i);
//			memoria = data.find('memoria').text().charAt(i);
//			tabella_pronta['p1'][i] = ((pronta == '1')||(pronta == '3')||(pronta == '4'));
//			tabella_pronta['p2'][i] = ((pronta == '2')||(pronta == '3')||(pronta == '4'));
//			tabella_pronta['p12'][i] = ((pronta == '3')||(pronta == '4'));
//			tabella_pronta['tot'][i] = (pronta == '4');
//			tabella_pronta['p1'][num_aree] &= tabella_pronta['p1'][i];
//			tabella_pronta['p2'][num_aree] &= tabella_pronta['p2'][i];
//			tabella_pronta['p12'][num_aree] &= tabella_pronta['p12'][i];
//			tabella_pronta['tot'][num_aree] &= tabella_pronta['tot'][i];
//			//ingresso = data.find('ingresso').text().charAt(i);
//			//uscita = data.find('uscita').text().charAt(i);
//			if (allarme == '1') {
//				$('#led_all_' + i).removeClass('green yell').addClass('on');
//				$('#led_to_' + i).removeClass('green yell').addClass('on');
//				$('#led_p1_' + i).removeClass('green yell').addClass('on');
//				$('#led_p2_' + i).removeClass('green yell').addClass('on');
//				$('#led_p12_' + i).removeClass('green yell').addClass('on');
//				$('#desc_' + i).addClass('alarm');
//			} else {
//				$('#led_all_' + i).removeClass('on');
//				$('#desc_' + i).removeClass('alarm');
//				//TOT
//				$('#led_to_' + i).removeClass('on green yell');
//				if (inserita == '4') {
//					$('#led_to_' + i).addClass('green');
//				} else if (!(tabella_pronta['tot'][i])) {
//					$('#led_to_' + i).addClass('yell');
//				}
//				//P1
//				$('#led_p1_' + i).removeClass('on green yell');
//				if ((inserita == '1') || (inserita == '3') || (inserita == '4')) {
//					$('#led_p1_' + i).addClass('green');
//				} else if (!(tabella_pronta['p1'][i])) {
//					$('#led_p1_' + i).addClass('yell');
//				}
//				//P2
//				$('#led_p2_' + i).removeClass('on green yell');
//				if ((inserita == '2') || (inserita == '3') || (inserita == '4')) {
//					$('#led_p2_' + i).addClass('green');
//				} else if (!(tabella_pronta['p2'][i])) {
//					$('#led_p2_' + i).addClass('yell');
//				}
//				//P12
//				$('#led_p12_' + i).removeClass('on green yell');
//				if ((inserita == '3') || (inserita == '4')) {
//					$('#led_p12_' + i).addClass('green');
//				} else if (!(tabella_pronta['p12'][i])) {
//					$('#led_p12_' + i).addClass('yell');
//				}
//			}
//			//Memoria allarme
//			if (memoria == '1') {
//				$('#led_mem_' + i).addClass('on');
//			} else {
//				$('#led_mem_' + i).removeClass('on');
//			}
//			//Anomaggio
//			$('#led_anom_' + i).removeClass('on yell');
//			if (sabot == '1') {
//				$('#led_anom_' + i).addClass('on');
//			} else if (anomalia == '1') {
//				$('#led_anom_' + i).addClass('yell');
//			}
//		}
//	} else {
//		if (isLogged('alm', data)) {
//			stopPoll();
//			$.ajax({method: 'GET',
//				'url': location.protocol + '//' + bridgehost + '/user/vedo_area_desc.xml',
//				'dataType': 'xml',
//				'async': false
//			}).done(function(xml) {
//				var $data = $(xml);
//				num_areas = 0;
//				for (var i = 0; i < num_aree; i++) {
//					if ($data.find('presente').text().charAt(i) != '0') {
//						$('#desc_' + i).html($data.find('desc').text().split(",")[i]);
//						$('#row' + i).css('display', '');
//						num_areas++;
//					} else {
//						$('#row' + i).css('display', 'none');
//					}
//				}
//				if (num_areas == 0) {
//					$('#total').css('display', 'none');
//				} else {
//					$('#total').css('display', '');
//				}
//			});
//			logged = true;
//			startPollFile('/user/vedo_area_stat.xml', vedoAreaAuth);
//			return true;
//		}
//	}
//	return false;
//}
/* EOF */